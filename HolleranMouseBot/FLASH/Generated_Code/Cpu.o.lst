   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Cpu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SR_reg,1,1
  18              		.global	SR_lock
  19              		.section	.bss.SR_lock,"aw",%nobits
  22              	SR_lock:
  23 0000 00       		.space	1
  24              		.section	.text.Cpu_INT_NMIInterrupt,"ax",%progbits
  25              		.align	2
  26              		.global	Cpu_INT_NMIInterrupt
  27              		.code	16
  28              		.thumb_func
  30              	Cpu_INT_NMIInterrupt:
  31              	.LFB0:
  32              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /* ###################################################################
   2:../Generated_Code/Cpu.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/Cpu.c **** **     Component   : MKL25Z128LK4
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.025, Driver 01.04, CPU db: 3.00.000
   8:../Generated_Code/Cpu.c **** **     Datasheet   : KL25P80M48SF0RM, Rev.3, Sep 2012
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2014-11-15, 18:04, # CodeGen: 88
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         SetOperationMode - LDD_TError Cpu_SetOperationMode(LDD_TDriverOperationMode OperationMod
  17:../Generated_Code/Cpu.c **** **         EnableInt        - void Cpu_EnableInt(void);
  18:../Generated_Code/Cpu.c **** **         DisableInt       - void Cpu_DisableInt(void);
  19:../Generated_Code/Cpu.c **** **
  20:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  21:../Generated_Code/Cpu.c **** **     All Rights Reserved.
  22:../Generated_Code/Cpu.c **** **     
  23:../Generated_Code/Cpu.c **** **     Redistribution and use in source and binary forms, with or without modification,
  24:../Generated_Code/Cpu.c **** **     are permitted provided that the following conditions are met:
  25:../Generated_Code/Cpu.c **** **     
  26:../Generated_Code/Cpu.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  27:../Generated_Code/Cpu.c **** **       of conditions and the following disclaimer.
  28:../Generated_Code/Cpu.c **** **     
  29:../Generated_Code/Cpu.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  30:../Generated_Code/Cpu.c **** **       list of conditions and the following disclaimer in the documentation and/or
  31:../Generated_Code/Cpu.c **** **       other materials provided with the distribution.
  32:../Generated_Code/Cpu.c **** **     
  33:../Generated_Code/Cpu.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  34:../Generated_Code/Cpu.c **** **       contributors may be used to endorse or promote products derived from this
  35:../Generated_Code/Cpu.c **** **       software without specific prior written permission.
  36:../Generated_Code/Cpu.c **** **     
  37:../Generated_Code/Cpu.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  38:../Generated_Code/Cpu.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  39:../Generated_Code/Cpu.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  40:../Generated_Code/Cpu.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  41:../Generated_Code/Cpu.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  42:../Generated_Code/Cpu.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  43:../Generated_Code/Cpu.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  44:../Generated_Code/Cpu.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  45:../Generated_Code/Cpu.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  46:../Generated_Code/Cpu.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  47:../Generated_Code/Cpu.c **** **     
  48:../Generated_Code/Cpu.c **** **     http: www.freescale.com
  49:../Generated_Code/Cpu.c **** **     mail: support@freescale.com
  50:../Generated_Code/Cpu.c **** ** ###################################################################*/
  51:../Generated_Code/Cpu.c **** /*!
  52:../Generated_Code/Cpu.c **** ** @file Cpu.c
  53:../Generated_Code/Cpu.c **** ** @version 01.04
  54:../Generated_Code/Cpu.c **** ** @brief
  55:../Generated_Code/Cpu.c **** **
  56:../Generated_Code/Cpu.c **** */         
  57:../Generated_Code/Cpu.c **** /*!
  58:../Generated_Code/Cpu.c **** **  @addtogroup Cpu_module Cpu module documentation
  59:../Generated_Code/Cpu.c **** **  @{
  60:../Generated_Code/Cpu.c **** */         
  61:../Generated_Code/Cpu.c **** 
  62:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  63:../Generated_Code/Cpu.c **** 
  64:../Generated_Code/Cpu.c **** /* {Default RTOS Adapter} No RTOS includes */
  65:../Generated_Code/Cpu.c **** #include "CsIO1.h"
  66:../Generated_Code/Cpu.c **** #include "IO1.h"
  67:../Generated_Code/Cpu.c **** #include "ADC1.h"
  68:../Generated_Code/Cpu.c **** #include "DMA1.h"
  69:../Generated_Code/Cpu.c **** #include "TU1.h"
  70:../Generated_Code/Cpu.c **** #include "IR.h"
  71:../Generated_Code/Cpu.c **** #include "LEDpin1.h"
  72:../Generated_Code/Cpu.c **** #include "BitIoLdd1.h"
  73:../Generated_Code/Cpu.c **** #include "w.h"
  74:../Generated_Code/Cpu.c **** #include "right.h"
  75:../Generated_Code/Cpu.c **** #include "PwmLdd1.h"
  76:../Generated_Code/Cpu.c **** #include "TU2.h"
  77:../Generated_Code/Cpu.c **** #include "left.h"
  78:../Generated_Code/Cpu.c **** #include "PwmLdd2.h"
  79:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  80:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  81:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  82:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  83:../Generated_Code/Cpu.c **** #include "Events.h"
  84:../Generated_Code/Cpu.c **** #include "Cpu.h"
  85:../Generated_Code/Cpu.c **** 
  86:../Generated_Code/Cpu.c **** #ifdef __cplusplus
  87:../Generated_Code/Cpu.c **** extern "C" {
  88:../Generated_Code/Cpu.c **** #endif
  89:../Generated_Code/Cpu.c **** 
  90:../Generated_Code/Cpu.c **** /* Global variables */
  91:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
  92:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
  93:../Generated_Code/Cpu.c **** 
  94:../Generated_Code/Cpu.c **** 
  95:../Generated_Code/Cpu.c **** /*
  96:../Generated_Code/Cpu.c **** ** ===================================================================
  97:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MKL25Z128LK4)
  98:../Generated_Code/Cpu.c **** **
  99:../Generated_Code/Cpu.c **** **     Description :
 100:../Generated_Code/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
 101:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 102:../Generated_Code/Cpu.c **** ** ===================================================================
 103:../Generated_Code/Cpu.c **** */
 104:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_NMIInterrupt)
 105:../Generated_Code/Cpu.c **** {
  33              		.loc 1 105 0
  34              		.cfi_startproc
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 00AF     		add	r7, sp, #0
  41              	.LCFI1:
  42              		.cfi_def_cfa_register 7
 106:../Generated_Code/Cpu.c ****   Cpu_OnNMIINT();
  43              		.loc 1 106 0
  44 0004 FFF7FEFF 		bl	Cpu_OnNMIINT
 107:../Generated_Code/Cpu.c **** }
  45              		.loc 1 107 0
  46 0008 BD46     		mov	sp, r7
  47              		@ sp needed for prologue
  48 000a 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE0:
  52              		.section	.text.Cpu_INT_Hard_FaultInterrupt,"ax",%progbits
  53              		.align	2
  54              		.global	Cpu_INT_Hard_FaultInterrupt
  55              		.code	16
  56              		.thumb_func
  58              	Cpu_INT_Hard_FaultInterrupt:
  59              	.LFB1:
 108:../Generated_Code/Cpu.c **** 
 109:../Generated_Code/Cpu.c **** /*
 110:../Generated_Code/Cpu.c **** ** ===================================================================
 111:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_Hard_FaultInterrupt (component MKL25Z128LK4)
 112:../Generated_Code/Cpu.c **** **
 113:../Generated_Code/Cpu.c **** **     Description :
 114:../Generated_Code/Cpu.c **** **         This ISR services the 'hard fault' interrupt.
 115:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 116:../Generated_Code/Cpu.c **** ** ===================================================================
 117:../Generated_Code/Cpu.c **** */
 118:../Generated_Code/Cpu.c **** PE_ISR(Cpu_INT_Hard_FaultInterrupt)
 119:../Generated_Code/Cpu.c **** {
  60              		.loc 1 119 0
  61              		.cfi_startproc
  62 0000 80B5     		push	{r7, lr}
  63              	.LCFI2:
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 00AF     		add	r7, sp, #0
  68              	.LCFI3:
  69              		.cfi_def_cfa_register 7
 120:../Generated_Code/Cpu.c ****   Cpu_OnHardFault();
  70              		.loc 1 120 0
  71 0004 FFF7FEFF 		bl	Cpu_OnHardFault
 121:../Generated_Code/Cpu.c **** }
  72              		.loc 1 121 0
  73 0008 BD46     		mov	sp, r7
  74              		@ sp needed for prologue
  75 000a 80BD     		pop	{r7, pc}
  76              		.cfi_endproc
  77              	.LFE1:
  79              		.section	.text.Cpu_Interrupt,"ax",%progbits
  80              		.align	2
  81              		.global	Cpu_Interrupt
  82              		.code	16
  83              		.thumb_func
  85              	Cpu_Interrupt:
  86              	.LFB2:
 122:../Generated_Code/Cpu.c **** 
 123:../Generated_Code/Cpu.c **** /*
 124:../Generated_Code/Cpu.c **** ** ===================================================================
 125:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MKL25Z128LK4)
 126:../Generated_Code/Cpu.c **** **
 127:../Generated_Code/Cpu.c **** **     Description :
 128:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
 129:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 130:../Generated_Code/Cpu.c **** ** ===================================================================
 131:../Generated_Code/Cpu.c **** */
 132:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
 133:../Generated_Code/Cpu.c **** {
  87              		.loc 1 133 0
  88              		.cfi_startproc
  89 0000 80B5     		push	{r7, lr}
  90              	.LCFI4:
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 7, -8
  93              		.cfi_offset 14, -4
  94 0002 00AF     		add	r7, sp, #0
  95              	.LCFI5:
  96              		.cfi_def_cfa_register 7
 134:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
 135:../Generated_Code/Cpu.c ****   //PE_DEBUGHALT();
 136:../Generated_Code/Cpu.c **** }
  97              		.loc 1 136 0
  98 0004 BD46     		mov	sp, r7
  99              		@ sp needed for prologue
 100 0006 80BD     		pop	{r7, pc}
 101              		.cfi_endproc
 102              	.LFE2:
 104              		.section	.text.Cpu_SetOperationMode,"ax",%progbits
 105              		.align	2
 106              		.global	Cpu_SetOperationMode
 107              		.code	16
 108              		.thumb_func
 110              	Cpu_SetOperationMode:
 111              	.LFB3:
 137:../Generated_Code/Cpu.c **** 
 138:../Generated_Code/Cpu.c **** /*
 139:../Generated_Code/Cpu.c **** ** ===================================================================
 140:../Generated_Code/Cpu.c **** **     Method      :  Cpu_SetOperationMode (component MKL25Z128LK4)
 141:../Generated_Code/Cpu.c **** */
 142:../Generated_Code/Cpu.c **** /*!
 143:../Generated_Code/Cpu.c **** **     @brief
 144:../Generated_Code/Cpu.c **** **         This method requests to change the component's operation
 145:../Generated_Code/Cpu.c **** **         mode (RUN, WAIT, SLEEP, STOP). The target operation mode
 146:../Generated_Code/Cpu.c **** **         will be entered immediately. 
 147:../Generated_Code/Cpu.c **** **         See [Operation mode settings] for further details of the
 148:../Generated_Code/Cpu.c **** **         operation modes mapping to low power modes of the cpu.
 149:../Generated_Code/Cpu.c **** **     @param
 150:../Generated_Code/Cpu.c **** **         OperationMode   - Requested driver
 151:../Generated_Code/Cpu.c **** **                           operation mode
 152:../Generated_Code/Cpu.c **** **     @param
 153:../Generated_Code/Cpu.c **** **         ModeChangeCallback - Callback to
 154:../Generated_Code/Cpu.c **** **                           notify the upper layer once a mode has been
 155:../Generated_Code/Cpu.c **** **                           changed. Parameter is ignored, only for
 156:../Generated_Code/Cpu.c **** **                           compatibility of API with other components.
 157:../Generated_Code/Cpu.c **** **     @param
 158:../Generated_Code/Cpu.c **** **         ModeChangeCallbackParamPtr 
 159:../Generated_Code/Cpu.c **** **                           - Pointer to callback parameter to notify
 160:../Generated_Code/Cpu.c **** **                           the upper layer once a mode has been
 161:../Generated_Code/Cpu.c **** **                           changed. Parameter is ignored, only for
 162:../Generated_Code/Cpu.c **** **                           compatibility of API with other components.
 163:../Generated_Code/Cpu.c **** **     @return
 164:../Generated_Code/Cpu.c **** **                         - Error code
 165:../Generated_Code/Cpu.c **** **                           ERR_OK - OK
 166:../Generated_Code/Cpu.c **** **                           ERR_PARAM_MODE - Invalid operation mode
 167:../Generated_Code/Cpu.c **** */
 168:../Generated_Code/Cpu.c **** /* ===================================================================*/
 169:../Generated_Code/Cpu.c **** LDD_TError Cpu_SetOperationMode(LDD_TDriverOperationMode OperationMode, LDD_TCallback ModeChangeCal
 170:../Generated_Code/Cpu.c **** {
 112              		.loc 1 170 0
 113              		.cfi_startproc
 114 0000 80B5     		push	{r7, lr}
 115              	.LCFI6:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 7, -8
 118              		.cfi_offset 14, -4
 119 0002 84B0     		sub	sp, sp, #16
 120              	.LCFI7:
 121              		.cfi_def_cfa_offset 24
 122 0004 00AF     		add	r7, sp, #0
 123              	.LCFI8:
 124              		.cfi_def_cfa_register 7
 125 0006 B960     		str	r1, [r7, #8]
 126 0008 7A60     		str	r2, [r7, #4]
 127 000a 3B1C     		mov	r3, r7
 128 000c 0F33     		add	r3, r3, #15
 129 000e 021C     		add	r2, r0, #0
 130 0010 1A70     		strb	r2, [r3]
 171:../Generated_Code/Cpu.c ****   (void) ModeChangeCallback;           /* Parameter is not used, suppress unused argument warning *
 172:../Generated_Code/Cpu.c ****   (void) ModeChangeCallbackParamPtr;   /* Parameter is not used, suppress unused argument warning *
 173:../Generated_Code/Cpu.c ****   switch (OperationMode) {
 131              		.loc 1 173 0
 132 0012 3B1C     		mov	r3, r7
 133 0014 0F33     		add	r3, r3, #15
 134 0016 1B78     		ldrb	r3, [r3]
 135 0018 022B     		cmp	r3, #2
 136 001a 2DD0     		beq	.L7
 137 001c 02DC     		bgt	.L10
 138 001e 012B     		cmp	r3, #1
 139 0020 05D0     		beq	.L6
 140 0022 68E0     		b	.L5
 141              	.L10:
 142 0024 032B     		cmp	r3, #3
 143 0026 41D0     		beq	.L8
 144 0028 042B     		cmp	r3, #4
 145 002a 66D0     		beq	.L15
 146 002c 63E0     		b	.L5
 147              	.L6:
 174:../Generated_Code/Cpu.c ****     case DOM_RUN:
 175:../Generated_Code/Cpu.c ****       /* SCB_SCR: SLEEPDEEP=0,SLEEPONEXIT=0 */
 176:../Generated_Code/Cpu.c ****       SCB_SCR &= (uint32_t)~(uint32_t)(
 148              		.loc 1 176 0
 149 002e 374A     		ldr	r2, .L17
 150 0030 3649     		ldr	r1, .L17
 151 0032 D123     		mov	r3, #209
 152 0034 1B01     		lsl	r3, r3, #4
 153 0036 CB58     		ldr	r3, [r1, r3]
 154 0038 0621     		mov	r1, #6
 155 003a 181C     		mov	r0, r3
 156 003c 8843     		bic	r0, r1
 157 003e 011C     		mov	r1, r0
 158 0040 D123     		mov	r3, #209
 159 0042 1B01     		lsl	r3, r3, #4
 160 0044 D150     		str	r1, [r2, r3]
 177:../Generated_Code/Cpu.c ****                   SCB_SCR_SLEEPDEEP_MASK |
 178:../Generated_Code/Cpu.c ****                   SCB_SCR_SLEEPONEXIT_MASK
 179:../Generated_Code/Cpu.c ****                  );
 180:../Generated_Code/Cpu.c ****       if ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) { /* If in PBE mode, switch to PEE. PEE to 
 161              		.loc 1 180 0
 162 0046 324B     		ldr	r3, .L17+4
 163 0048 9B79     		ldrb	r3, [r3, #6]
 164 004a DBB2     		uxtb	r3, r3
 165 004c 1A1C     		mov	r2, r3
 166 004e 0C23     		mov	r3, #12
 167 0050 1340     		and	r3, r2
 168 0052 0C2B     		cmp	r3, #12
 169 0054 53D0     		beq	.L16
 181:../Generated_Code/Cpu.c ****         /* MCG_C1: CLKS=0,IREFS=0 */
 182:../Generated_Code/Cpu.c ****         MCG_C1 &= (uint8_t)~(uint8_t)((MCG_C1_CLKS(0x03) | MCG_C1_IREFS_MASK));
 170              		.loc 1 182 0
 171 0056 2E4B     		ldr	r3, .L17+4
 172 0058 2D4A     		ldr	r2, .L17+4
 173 005a 1278     		ldrb	r2, [r2]
 174 005c D1B2     		uxtb	r1, r2
 175 005e 3B22     		mov	r2, #59
 176 0060 0A40     		and	r2, r1
 177 0062 D2B2     		uxtb	r2, r2
 178 0064 1A70     		strb	r2, [r3]
 183:../Generated_Code/Cpu.c ****         while( (MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait for PLL lock */
 179              		.loc 1 183 0
 180 0066 C046     		mov	r8, r8
 181              	.L12:
 182              		.loc 1 183 0 is_stmt 0
 183 0068 294B     		ldr	r3, .L17+4
 184 006a 9B79     		ldrb	r3, [r3, #6]
 185 006c DBB2     		uxtb	r3, r3
 186 006e 1A1C     		mov	r2, r3
 187 0070 4023     		mov	r3, #64
 188 0072 1340     		and	r3, r2
 189 0074 F8D0     		beq	.L12
 184:../Generated_Code/Cpu.c ****         }
 185:../Generated_Code/Cpu.c ****       }
 186:../Generated_Code/Cpu.c ****       break;
 190              		.loc 1 186 0 is_stmt 1
 191 0076 42E0     		b	.L16
 192              	.L7:
 187:../Generated_Code/Cpu.c ****     case DOM_WAIT:
 188:../Generated_Code/Cpu.c ****       /* SCB_SCR: SLEEPDEEP=0 */
 189:../Generated_Code/Cpu.c ****       SCB_SCR &= (uint32_t)~(uint32_t)(SCB_SCR_SLEEPDEEP_MASK);
 193              		.loc 1 189 0
 194 0078 244A     		ldr	r2, .L17
 195 007a 2449     		ldr	r1, .L17
 196 007c D123     		mov	r3, #209
 197 007e 1B01     		lsl	r3, r3, #4
 198 0080 CB58     		ldr	r3, [r1, r3]
 199 0082 0421     		mov	r1, #4
 200 0084 181C     		mov	r0, r3
 201 0086 8843     		bic	r0, r1
 202 0088 011C     		mov	r1, r0
 203 008a D123     		mov	r3, #209
 204 008c 1B01     		lsl	r3, r3, #4
 205 008e D150     		str	r1, [r2, r3]
 190:../Generated_Code/Cpu.c ****       /* SCB_SCR: SLEEPONEXIT=0 */
 191:../Generated_Code/Cpu.c ****       SCB_SCR &= (uint32_t)~(uint32_t)(SCB_SCR_SLEEPONEXIT_MASK);
 206              		.loc 1 191 0
 207 0090 1E4A     		ldr	r2, .L17
 208 0092 1E49     		ldr	r1, .L17
 209 0094 D123     		mov	r3, #209
 210 0096 1B01     		lsl	r3, r3, #4
 211 0098 CB58     		ldr	r3, [r1, r3]
 212 009a 0221     		mov	r1, #2
 213 009c 181C     		mov	r0, r3
 214 009e 8843     		bic	r0, r1
 215 00a0 011C     		mov	r1, r0
 216 00a2 D123     		mov	r3, #209
 217 00a4 1B01     		lsl	r3, r3, #4
 218 00a6 D150     		str	r1, [r2, r3]
 192:../Generated_Code/Cpu.c ****       PE_WFI();
 219              		.loc 1 192 0
 220              	@ 192 "../Generated_Code/Cpu.c" 1
 221 00a8 30BF     		WFI
 222              	@ 0 "" 2
 193:../Generated_Code/Cpu.c ****       break;
 223              		.loc 1 193 0
 224              		.code	16
 225 00aa 29E0     		b	.L13
 226              	.L8:
 194:../Generated_Code/Cpu.c ****     case DOM_SLEEP:
 195:../Generated_Code/Cpu.c ****       /* SCB_SCR: SLEEPDEEP=1 */
 196:../Generated_Code/Cpu.c ****       SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;
 227              		.loc 1 196 0
 228 00ac 174A     		ldr	r2, .L17
 229 00ae 1749     		ldr	r1, .L17
 230 00b0 D123     		mov	r3, #209
 231 00b2 1B01     		lsl	r3, r3, #4
 232 00b4 CB58     		ldr	r3, [r1, r3]
 233 00b6 0421     		mov	r1, #4
 234 00b8 1943     		orr	r1, r3
 235 00ba D123     		mov	r3, #209
 236 00bc 1B01     		lsl	r3, r3, #4
 237 00be D150     		str	r1, [r2, r3]
 197:../Generated_Code/Cpu.c ****       /* SMC_STOPCTRL: PSTOPO=0,PORPO=0,??=0,??=0,VLLSM=0 */
 198:../Generated_Code/Cpu.c ****       SMC_STOPCTRL = (SMC_STOPCTRL_PSTOPO(0x00) | SMC_STOPCTRL_VLLSM(0x00));
 238              		.loc 1 198 0
 239 00c0 144B     		ldr	r3, .L17+8
 240 00c2 0022     		mov	r2, #0
 241 00c4 9A70     		strb	r2, [r3, #2]
 199:../Generated_Code/Cpu.c ****       /* SMC_PMCTRL: STOPM=0 */
 200:../Generated_Code/Cpu.c ****       SMC_PMCTRL &= (uint8_t)~(uint8_t)(SMC_PMCTRL_STOPM(0x07));
 242              		.loc 1 200 0
 243 00c6 134B     		ldr	r3, .L17+8
 244 00c8 124A     		ldr	r2, .L17+8
 245 00ca 5278     		ldrb	r2, [r2, #1]
 246 00cc D2B2     		uxtb	r2, r2
 247 00ce 0721     		mov	r1, #7
 248 00d0 8A43     		bic	r2, r1
 249 00d2 D2B2     		uxtb	r2, r2
 250 00d4 5A70     		strb	r2, [r3, #1]
 201:../Generated_Code/Cpu.c ****       (void)(SMC_PMCTRL == 0U);        /* Dummy read of SMC_PMCTRL to ensure the register is writte
 251              		.loc 1 201 0
 252 00d6 0F4B     		ldr	r3, .L17+8
 253 00d8 5B78     		ldrb	r3, [r3, #1]
 202:../Generated_Code/Cpu.c ****       /* SCB_SCR: SLEEPONEXIT=0 */
 203:../Generated_Code/Cpu.c ****       SCB_SCR &= (uint32_t)~(uint32_t)(SCB_SCR_SLEEPONEXIT_MASK);
 254              		.loc 1 203 0
 255 00da 0C4A     		ldr	r2, .L17
 256 00dc 0B49     		ldr	r1, .L17
 257 00de D123     		mov	r3, #209
 258 00e0 1B01     		lsl	r3, r3, #4
 259 00e2 CB58     		ldr	r3, [r1, r3]
 260 00e4 0221     		mov	r1, #2
 261 00e6 181C     		mov	r0, r3
 262 00e8 8843     		bic	r0, r1
 263 00ea 011C     		mov	r1, r0
 264 00ec D123     		mov	r3, #209
 265 00ee 1B01     		lsl	r3, r3, #4
 266 00f0 D150     		str	r1, [r2, r3]
 204:../Generated_Code/Cpu.c ****       PE_WFI();
 267              		.loc 1 204 0
 268              	@ 204 "../Generated_Code/Cpu.c" 1
 269 00f2 30BF     		WFI
 270              	@ 0 "" 2
 205:../Generated_Code/Cpu.c ****       break;
 271              		.loc 1 205 0
 272              		.code	16
 273 00f4 04E0     		b	.L13
 274              	.L5:
 206:../Generated_Code/Cpu.c ****     case DOM_STOP:
 207:../Generated_Code/Cpu.c ****       break;
 208:../Generated_Code/Cpu.c ****     default:
 209:../Generated_Code/Cpu.c ****       return ERR_PARAM_MODE;
 275              		.loc 1 209 0
 276 00f6 8123     		mov	r3, #129
 277 00f8 03E0     		b	.L14
 278              	.L15:
 207:../Generated_Code/Cpu.c ****       break;
 279              		.loc 1 207 0
 280 00fa C046     		mov	r8, r8
 281 00fc 00E0     		b	.L13
 282              	.L16:
 186:../Generated_Code/Cpu.c ****       break;
 283              		.loc 1 186 0
 284 00fe C046     		mov	r8, r8
 285              	.L13:
 210:../Generated_Code/Cpu.c ****   }
 211:../Generated_Code/Cpu.c ****   return ERR_OK;
 286              		.loc 1 211 0
 287 0100 0023     		mov	r3, #0
 288              	.L14:
 212:../Generated_Code/Cpu.c **** }
 289              		.loc 1 212 0
 290 0102 181C     		mov	r0, r3
 291 0104 BD46     		mov	sp, r7
 292 0106 04B0     		add	sp, sp, #16
 293              		@ sp needed for prologue
 294 0108 80BD     		pop	{r7, pc}
 295              	.L18:
 296 010a C046     		.align	2
 297              	.L17:
 298 010c 00E000E0 		.word	-536813568
 299 0110 00400640 		.word	1074151424
 300 0114 00E00740 		.word	1074257920
 301              		.cfi_endproc
 302              	.LFE3:
 304              		.section	.text.Cpu_EnableInt,"ax",%progbits
 305              		.align	2
 306              		.global	Cpu_EnableInt
 307              		.code	16
 308              		.thumb_func
 310              	Cpu_EnableInt:
 311              	.LFB4:
 213:../Generated_Code/Cpu.c **** 
 214:../Generated_Code/Cpu.c **** /*
 215:../Generated_Code/Cpu.c **** ** ===================================================================
 216:../Generated_Code/Cpu.c **** **     Method      :  Cpu_EnableInt (component MKL25Z128LK4)
 217:../Generated_Code/Cpu.c **** */
 218:../Generated_Code/Cpu.c **** /*!
 219:../Generated_Code/Cpu.c **** **     @brief
 220:../Generated_Code/Cpu.c **** **         Enables all maskable interrupts.
 221:../Generated_Code/Cpu.c **** */
 222:../Generated_Code/Cpu.c **** /* ===================================================================*/
 223:../Generated_Code/Cpu.c **** void Cpu_EnableInt(void)
 224:../Generated_Code/Cpu.c **** {
 312              		.loc 1 224 0
 313              		.cfi_startproc
 314 0000 80B5     		push	{r7, lr}
 315              	.LCFI9:
 316              		.cfi_def_cfa_offset 8
 317              		.cfi_offset 7, -8
 318              		.cfi_offset 14, -4
 319 0002 00AF     		add	r7, sp, #0
 320              	.LCFI10:
 321              		.cfi_def_cfa_register 7
 225:../Generated_Code/Cpu.c ****  __EI();
 322              		.loc 1 225 0
 323              	@ 225 "../Generated_Code/Cpu.c" 1
 324 0004 62B6     		CPSIE i
 325              	@ 0 "" 2
 226:../Generated_Code/Cpu.c **** }
 326              		.loc 1 226 0
 327              		.code	16
 328 0006 BD46     		mov	sp, r7
 329              		@ sp needed for prologue
 330 0008 80BD     		pop	{r7, pc}
 331              		.cfi_endproc
 332              	.LFE4:
 334 000a C046     		.section	.text.Cpu_DisableInt,"ax",%progbits
 335              		.align	2
 336              		.global	Cpu_DisableInt
 337              		.code	16
 338              		.thumb_func
 340              	Cpu_DisableInt:
 341              	.LFB5:
 227:../Generated_Code/Cpu.c **** 
 228:../Generated_Code/Cpu.c **** /*
 229:../Generated_Code/Cpu.c **** ** ===================================================================
 230:../Generated_Code/Cpu.c **** **     Method      :  Cpu_DisableInt (component MKL25Z128LK4)
 231:../Generated_Code/Cpu.c **** */
 232:../Generated_Code/Cpu.c **** /*!
 233:../Generated_Code/Cpu.c **** **     @brief
 234:../Generated_Code/Cpu.c **** **         Disables all maskable interrupts.
 235:../Generated_Code/Cpu.c **** */
 236:../Generated_Code/Cpu.c **** /* ===================================================================*/
 237:../Generated_Code/Cpu.c **** void Cpu_DisableInt(void)
 238:../Generated_Code/Cpu.c **** {
 342              		.loc 1 238 0
 343              		.cfi_startproc
 344 0000 80B5     		push	{r7, lr}
 345              	.LCFI11:
 346              		.cfi_def_cfa_offset 8
 347              		.cfi_offset 7, -8
 348              		.cfi_offset 14, -4
 349 0002 00AF     		add	r7, sp, #0
 350              	.LCFI12:
 351              		.cfi_def_cfa_register 7
 239:../Generated_Code/Cpu.c ****  __DI();
 352              		.loc 1 239 0
 353              	@ 239 "../Generated_Code/Cpu.c" 1
 354 0004 72B6     		CPSID i
 355              	@ 0 "" 2
 240:../Generated_Code/Cpu.c **** }
 356              		.loc 1 240 0
 357              		.code	16
 358 0006 BD46     		mov	sp, r7
 359              		@ sp needed for prologue
 360 0008 80BD     		pop	{r7, pc}
 361              		.cfi_endproc
 362              	.LFE5:
 364 000a C046     		.section	.text.__init_hardware,"ax",%progbits
 365              		.align	2
 366              		.global	__init_hardware
 367              		.code	16
 368              		.thumb_func
 370              	__init_hardware:
 371              	.LFB6:
 241:../Generated_Code/Cpu.c **** 
 242:../Generated_Code/Cpu.c **** 
 243:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
 244:../Generated_Code/Cpu.c **** 
 245:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
 246:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
 247:../Generated_Code/Cpu.c **** void __init_hardware(void)
 248:../Generated_Code/Cpu.c **** {
 372              		.loc 1 248 0
 373              		.cfi_startproc
 374 0000 80B5     		push	{r7, lr}
 375              	.LCFI13:
 376              		.cfi_def_cfa_offset 8
 377              		.cfi_offset 7, -8
 378              		.cfi_offset 14, -4
 379 0002 00AF     		add	r7, sp, #0
 380              	.LCFI14:
 381              		.cfi_def_cfa_register 7
 249:../Generated_Code/Cpu.c **** 
 250:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
 251:../Generated_Code/Cpu.c **** 
 252:../Generated_Code/Cpu.c ****   /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
 253:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
 254:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
 382              		.loc 1 254 0
 383 0004 534A     		ldr	r2, .L28
 384 0006 5449     		ldr	r1, .L28+4
 385 0008 544B     		ldr	r3, .L28+8
 386 000a D150     		str	r1, [r2, r3]
 255:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
 256:../Generated_Code/Cpu.c ****   /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
 257:../Generated_Code/Cpu.c ****   SIM_COPC = SIM_COPC_COPT(0x00);
 387              		.loc 1 257 0
 388 000c 544A     		ldr	r2, .L28+12
 389 000e 8823     		mov	r3, #136
 390 0010 5B01     		lsl	r3, r3, #5
 391 0012 0021     		mov	r1, #0
 392 0014 D150     		str	r1, [r2, r3]
 258:../Generated_Code/Cpu.c **** 
 259:../Generated_Code/Cpu.c ****   /* System clock initialization */
 260:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,?
 261:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescale
 393              		.loc 1 261 0
 394 0016 524A     		ldr	r2, .L28+12
 395 0018 524B     		ldr	r3, .L28+16
 396 001a C021     		mov	r1, #192
 397 001c 8902     		lsl	r1, r1, #10
 398 001e D150     		str	r1, [r2, r3]
 262:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTD=1,PORTB=1,PORTA=1 */
 263:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK |
 399              		.loc 1 263 0
 400 0020 4F4A     		ldr	r2, .L28+12
 401 0022 4F49     		ldr	r1, .L28+12
 402 0024 504B     		ldr	r3, .L28+20
 403 0026 CB58     		ldr	r3, [r1, r3]
 404 0028 B021     		mov	r1, #176
 405 002a 4901     		lsl	r1, r1, #5
 406 002c 1943     		orr	r1, r3
 407 002e 4E4B     		ldr	r3, .L28+20
 408 0030 D150     		str	r1, [r2, r3]
 264:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTB_MASK |
 265:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
 266:../Generated_Code/Cpu.c ****   if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
 409              		.loc 1 266 0
 410 0032 4E4B     		ldr	r3, .L28+24
 411 0034 9B78     		ldrb	r3, [r3, #2]
 412 0036 DBB2     		uxtb	r3, r3
 413 0038 1A1C     		mov	r2, r3
 414 003a 0823     		mov	r3, #8
 415 003c 1340     		and	r3, r2
 416 003e 07D0     		beq	.L22
 267:../Generated_Code/Cpu.c ****     /* PMC_REGSC: ACKISO=1 */
 268:../Generated_Code/Cpu.c ****     PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
 417              		.loc 1 268 0
 418 0040 4A4B     		ldr	r3, .L28+24
 419 0042 4A4A     		ldr	r2, .L28+24
 420 0044 9278     		ldrb	r2, [r2, #2]
 421 0046 D2B2     		uxtb	r2, r2
 422 0048 0821     		mov	r1, #8
 423 004a 0A43     		orr	r2, r1
 424 004c D2B2     		uxtb	r2, r2
 425 004e 9A70     		strb	r2, [r3, #2]
 426              	.L22:
 269:../Generated_Code/Cpu.c ****   }
 270:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,?
 271:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescaler
 427              		.loc 1 271 0
 428 0050 434A     		ldr	r2, .L28+12
 429 0052 444B     		ldr	r3, .L28+16
 430 0054 8021     		mov	r1, #128
 431 0056 4902     		lsl	r1, r1, #9
 432 0058 D150     		str	r1, [r2, r3]
 272:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=1 */
 273:../Generated_Code/Cpu.c ****   SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK; /* Select PLL as a clock source for various peripherals */
 433              		.loc 1 273 0
 434 005a 414A     		ldr	r2, .L28+12
 435 005c 4049     		ldr	r1, .L28+12
 436 005e 444B     		ldr	r3, .L28+28
 437 0060 CB58     		ldr	r3, [r1, r3]
 438 0062 8021     		mov	r1, #128
 439 0064 4902     		lsl	r1, r1, #9
 440 0066 1943     		orr	r1, r3
 441 0068 414B     		ldr	r3, .L28+28
 442 006a D150     		str	r1, [r2, r3]
 274:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=0 */
 275:../Generated_Code/Cpu.c ****   SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL(0x03)); /* System oscillator drives 32 kHz
 443              		.loc 1 275 0
 444 006c 3C4B     		ldr	r3, .L28+12
 445 006e 3C4A     		ldr	r2, .L28+12
 446 0070 1168     		ldr	r1, [r2]
 447 0072 404A     		ldr	r2, .L28+32
 448 0074 0A40     		and	r2, r1
 449 0076 1A60     		str	r2, [r3]
 276:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: TPMSRC=1 */
 277:../Generated_Code/Cpu.c ****   SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
 450              		.loc 1 277 0
 451 0078 394A     		ldr	r2, .L28+12
 452 007a 3949     		ldr	r1, .L28+12
 453 007c 3C4B     		ldr	r3, .L28+28
 454 007e C958     		ldr	r1, [r1, r3]
 455 0080 3D4B     		ldr	r3, .L28+36
 456 0082 0B40     		and	r3, r1
 457 0084 8021     		mov	r1, #128
 458 0086 4904     		lsl	r1, r1, #17
 459 0088 1943     		orr	r1, r3
 460 008a 394B     		ldr	r3, .L28+28
 461 008c D150     		str	r1, [r2, r3]
 278:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x02)
 279:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 280:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x01)
 281:../Generated_Code/Cpu.c ****               ));                      /* Set the TPM clock */
 282:../Generated_Code/Cpu.c ****   /* PORTA_PCR18: ISF=0,MUX=0 */
 283:../Generated_Code/Cpu.c ****   PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
 462              		.loc 1 283 0
 463 008e 3B4B     		ldr	r3, .L28+40
 464 0090 3A4A     		ldr	r2, .L28+40
 465 0092 916C     		ldr	r1, [r2, #72]
 466 0094 3A4A     		ldr	r2, .L28+44
 467 0096 0A40     		and	r2, r1
 468 0098 9A64     		str	r2, [r3, #72]
 284:../Generated_Code/Cpu.c ****   /* PORTA_PCR19: ISF=0,MUX=0 */
 285:../Generated_Code/Cpu.c ****   PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
 469              		.loc 1 285 0
 470 009a 384B     		ldr	r3, .L28+40
 471 009c 374A     		ldr	r2, .L28+40
 472 009e D16C     		ldr	r1, [r2, #76]
 473 00a0 374A     		ldr	r2, .L28+44
 474 00a2 0A40     		and	r2, r1
 475 00a4 DA64     		str	r2, [r3, #76]
 286:../Generated_Code/Cpu.c ****   /* MCG_SC: FCRDIV=1 */
 287:../Generated_Code/Cpu.c ****   MCG_SC = (uint8_t)((MCG_SC & (uint8_t)~(uint8_t)(
 476              		.loc 1 287 0
 477 00a6 374B     		ldr	r3, .L28+48
 478 00a8 364A     		ldr	r2, .L28+48
 479 00aa 127A     		ldrb	r2, [r2, #8]
 480 00ac D2B2     		uxtb	r2, r2
 481 00ae D2B2     		uxtb	r2, r2
 482 00b0 0E21     		mov	r1, #14
 483 00b2 8A43     		bic	r2, r1
 484 00b4 D2B2     		uxtb	r2, r2
 485 00b6 0221     		mov	r1, #2
 486 00b8 0A43     		orr	r2, r1
 487 00ba D2B2     		uxtb	r2, r2
 488 00bc D2B2     		uxtb	r2, r2
 489 00be 1A72     		strb	r2, [r3, #8]
 288:../Generated_Code/Cpu.c ****             MCG_SC_FCRDIV(0x06)
 289:../Generated_Code/Cpu.c ****            )) | (uint8_t)(
 290:../Generated_Code/Cpu.c ****             MCG_SC_FCRDIV(0x01)
 291:../Generated_Code/Cpu.c ****            ));
 292:../Generated_Code/Cpu.c ****   /* Switch to FBE Mode */
 293:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=1 */
 294:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE0(0x02) | MCG_C2_EREFS0_MASK | MCG_C2_IRCS_MASK);
 490              		.loc 1 294 0
 491 00c0 304B     		ldr	r3, .L28+48
 492 00c2 2522     		mov	r2, #37
 493 00c4 5A70     		strb	r2, [r3, #1]
 295:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 296:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;
 494              		.loc 1 296 0
 495 00c6 304B     		ldr	r3, .L28+52
 496 00c8 8022     		mov	r2, #128
 497 00ca 1A70     		strb	r2, [r3]
 297:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 298:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);
 498              		.loc 1 298 0
 499 00cc 2D4B     		ldr	r3, .L28+48
 500 00ce 9A22     		mov	r2, #154
 501 00d0 1A70     		strb	r2, [r3]
 299:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 300:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));
 502              		.loc 1 300 0
 503 00d2 2C4B     		ldr	r3, .L28+48
 504 00d4 2B4A     		ldr	r2, .L28+48
 505 00d6 D278     		ldrb	r2, [r2, #3]
 506 00d8 D1B2     		uxtb	r1, r2
 507 00da 1F22     		mov	r2, #31
 508 00dc 0A40     		and	r2, r1
 509 00de D2B2     		uxtb	r2, r2
 510 00e0 DA70     		strb	r2, [r3, #3]
 301:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=3 */
 302:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x03);
 511              		.loc 1 302 0
 512 00e2 284B     		ldr	r3, .L28+48
 513 00e4 0322     		mov	r2, #3
 514 00e6 1A71     		strb	r2, [r3, #4]
 303:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 304:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_VDIV0(0x00);
 515              		.loc 1 304 0
 516 00e8 264B     		ldr	r3, .L28+48
 517 00ea 0022     		mov	r2, #0
 518 00ec 5A71     		strb	r2, [r3, #5]
 305:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock
 519              		.loc 1 305 0
 520 00ee C046     		mov	r8, r8
 521              	.L23:
 522              		.loc 1 305 0 is_stmt 0
 523 00f0 244B     		ldr	r3, .L28+48
 524 00f2 9B79     		ldrb	r3, [r3, #6]
 525 00f4 DBB2     		uxtb	r3, r3
 526 00f6 1A1C     		mov	r2, r3
 527 00f8 1023     		mov	r3, #16
 528 00fa 1340     		and	r3, r2
 529 00fc F8D1     		bne	.L23
 306:../Generated_Code/Cpu.c ****   }
 307:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 530              		.loc 1 307 0 is_stmt 1
 531 00fe C046     		mov	r8, r8
 532              	.L24:
 533              		.loc 1 307 0 is_stmt 0
 534 0100 204B     		ldr	r3, .L28+48
 535 0102 9B79     		ldrb	r3, [r3, #6]
 536 0104 DBB2     		uxtb	r3, r3
 537 0106 1A1C     		mov	r2, r3
 538 0108 0C23     		mov	r3, #12
 539 010a 1340     		and	r3, r2
 540 010c 082B     		cmp	r3, #8
 541 010e F7D1     		bne	.L24
 308:../Generated_Code/Cpu.c ****   }
 309:../Generated_Code/Cpu.c ****   /* Switch to PBE Mode */
 310:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
 311:../Generated_Code/Cpu.c ****   MCG_C6 = (MCG_C6_PLLS_MASK | MCG_C6_VDIV0(0x00));
 542              		.loc 1 311 0 is_stmt 1
 543 0110 1C4B     		ldr	r3, .L28+48
 544 0112 4022     		mov	r2, #64
 545 0114 5A71     		strb	r2, [r3, #5]
 312:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 546              		.loc 1 312 0
 547 0116 C046     		mov	r8, r8
 548              	.L25:
 549              		.loc 1 312 0 is_stmt 0
 550 0118 1A4B     		ldr	r3, .L28+48
 551 011a 9B79     		ldrb	r3, [r3, #6]
 552 011c DBB2     		uxtb	r3, r3
 553 011e 1A1C     		mov	r2, r3
 554 0120 0C23     		mov	r3, #12
 555 0122 1340     		and	r3, r2
 556 0124 082B     		cmp	r3, #8
 557 0126 F7D1     		bne	.L25
 313:../Generated_Code/Cpu.c ****   }
 314:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
 558              		.loc 1 314 0 is_stmt 1
 559 0128 C046     		mov	r8, r8
 560              	.L26:
 561              		.loc 1 314 0 is_stmt 0
 562 012a 164B     		ldr	r3, .L28+48
 563 012c 9B79     		ldrb	r3, [r3, #6]
 564 012e DBB2     		uxtb	r3, r3
 565 0130 1A1C     		mov	r2, r3
 566 0132 4023     		mov	r3, #64
 567 0134 1340     		and	r3, r2
 568 0136 F8D0     		beq	.L26
 315:../Generated_Code/Cpu.c ****   }
 316:../Generated_Code/Cpu.c ****   /* Switch to PEE Mode */
 317:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 318:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x00) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);
 569              		.loc 1 318 0 is_stmt 1
 570 0138 124B     		ldr	r3, .L28+48
 571 013a 1A22     		mov	r2, #26
 572 013c 1A70     		strb	r2, [r3]
 319:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
 573              		.loc 1 319 0
 574 013e C046     		mov	r8, r8
 575              	.L27:
 576              		.loc 1 319 0 is_stmt 0
 577 0140 104B     		ldr	r3, .L28+48
 578 0142 9B79     		ldrb	r3, [r3, #6]
 579 0144 DBB2     		uxtb	r3, r3
 580 0146 1A1C     		mov	r2, r3
 581 0148 0C23     		mov	r3, #12
 582 014a 1340     		and	r3, r2
 583 014c 0C2B     		cmp	r3, #12
 584 014e F7D1     		bne	.L27
 320:../Generated_Code/Cpu.c ****   }
 321:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 322:../Generated_Code/Cpu.c **** 
 323:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 324:../Generated_Code/Cpu.c **** 
 325:../Generated_Code/Cpu.c **** }
 585              		.loc 1 325 0 is_stmt 1
 586 0150 BD46     		mov	sp, r7
 587              		@ sp needed for prologue
 588 0152 80BD     		pop	{r7, pc}
 589              	.L29:
 590              		.align	2
 591              	.L28:
 592 0154 00E000E0 		.word	-536813568
 593 0158 00000000 		.word	__vect_table
 594 015c 080D0000 		.word	3336
 595 0160 00700440 		.word	1074032640
 596 0164 44100000 		.word	4164
 597 0168 38100000 		.word	4152
 598 016c 00D00740 		.word	1074253824
 599 0170 04100000 		.word	4100
 600 0174 FFFFF3FF 		.word	-786433
 601 0178 FFFFFFFC 		.word	-50331649
 602 017c 00900440 		.word	1074040832
 603 0180 FFF8FFFE 		.word	-16779009
 604 0184 00400640 		.word	1074151424
 605 0188 00500640 		.word	1074155520
 606              		.cfi_endproc
 607              	.LFE6:
 609              		.section	.text.PE_low_level_init,"ax",%progbits
 610              		.align	2
 611              		.global	PE_low_level_init
 612              		.code	16
 613              		.thumb_func
 615              	PE_low_level_init:
 616              	.LFB7:
 326:../Generated_Code/Cpu.c **** 
 327:../Generated_Code/Cpu.c **** 
 328:../Generated_Code/Cpu.c **** 
 329:../Generated_Code/Cpu.c **** /*
 330:../Generated_Code/Cpu.c **** ** ===================================================================
 331:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MKL25Z128LK4)
 332:../Generated_Code/Cpu.c **** **
 333:../Generated_Code/Cpu.c **** **     Description :
 334:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 335:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 336:../Generated_Code/Cpu.c **** **         application initialization code.
 337:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 338:../Generated_Code/Cpu.c **** ** ===================================================================
 339:../Generated_Code/Cpu.c **** */
 340:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 341:../Generated_Code/Cpu.c **** {
 617              		.loc 1 341 0
 618              		.cfi_startproc
 619 0000 80B5     		push	{r7, lr}
 620              	.LCFI15:
 621              		.cfi_def_cfa_offset 8
 622              		.cfi_offset 7, -8
 623              		.cfi_offset 14, -4
 624 0002 00AF     		add	r7, sp, #0
 625              	.LCFI16:
 626              		.cfi_def_cfa_register 7
 342:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 343:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 344:../Generated_Code/Cpu.c ****   #endif
 345:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 346:../Generated_Code/Cpu.c ****   /* PORTA_PCR4: ISF=0,MUX=7 */
 347:../Generated_Code/Cpu.c ****   PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
 627              		.loc 1 347 0
 628 0004 4C4B     		ldr	r3, .L31
 629 0006 4C4A     		ldr	r2, .L31
 630 0008 1169     		ldr	r1, [r2, #16]
 631 000a 4C4A     		ldr	r2, .L31+4
 632 000c 0A40     		and	r2, r1
 633 000e E021     		mov	r1, #224
 634 0010 C900     		lsl	r1, r1, #3
 635 0012 0A43     		orr	r2, r1
 636 0014 1A61     		str	r2, [r3, #16]
 348:../Generated_Code/Cpu.c ****                 PORT_PCR_ISF_MASK
 349:../Generated_Code/Cpu.c ****                )) | (uint32_t)(
 350:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x07)
 351:../Generated_Code/Cpu.c ****                ));
 352:../Generated_Code/Cpu.c ****         /* Initialization of the RCM module */
 353:../Generated_Code/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 354:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));
 637              		.loc 1 354 0
 638 0016 4A4B     		ldr	r3, .L31+8
 639 0018 494A     		ldr	r2, .L31+8
 640 001a 5279     		ldrb	r2, [r2, #5]
 641 001c D2B2     		uxtb	r2, r2
 642 001e 1F21     		mov	r1, #31
 643 0020 8A43     		bic	r2, r1
 644 0022 D2B2     		uxtb	r2, r2
 645 0024 5A71     		strb	r2, [r3, #5]
 355:../Generated_Code/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 356:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 646              		.loc 1 356 0
 647 0026 464B     		ldr	r3, .L31+8
 648 0028 454A     		ldr	r2, .L31+8
 649 002a 1279     		ldrb	r2, [r2, #4]
 650 002c D2B2     		uxtb	r2, r2
 651 002e 0721     		mov	r1, #7
 652 0030 8A43     		bic	r2, r1
 653 0032 D2B2     		uxtb	r2, r2
 654 0034 1A71     		strb	r2, [r3, #4]
 357:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 358:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 359:../Generated_Code/Cpu.c ****               );
 360:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 361:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 362:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 655              		.loc 1 362 0
 656 0036 434B     		ldr	r3, .L31+12
 657 0038 424A     		ldr	r2, .L31+12
 658 003a 1278     		ldrb	r2, [r2]
 659 003c D2B2     		uxtb	r2, r2
 660 003e D2B2     		uxtb	r2, r2
 661 0040 7321     		mov	r1, #115
 662 0042 8A43     		bic	r2, r1
 663 0044 D2B2     		uxtb	r2, r2
 664 0046 5021     		mov	r1, #80
 665 0048 0A43     		orr	r2, r1
 666 004a D2B2     		uxtb	r2, r2
 667 004c D2B2     		uxtb	r2, r2
 668 004e 1A70     		strb	r2, [r3]
 363:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 364:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 365:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 366:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 367:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 368:../Generated_Code/Cpu.c ****                ));
 369:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 370:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 669              		.loc 1 370 0
 670 0050 3C4B     		ldr	r3, .L31+12
 671 0052 3C4A     		ldr	r2, .L31+12
 672 0054 5278     		ldrb	r2, [r2, #1]
 673 0056 D2B2     		uxtb	r2, r2
 674 0058 D2B2     		uxtb	r2, r2
 675 005a 6321     		mov	r1, #99
 676 005c 8A43     		bic	r2, r1
 677 005e D2B2     		uxtb	r2, r2
 678 0060 4021     		mov	r1, #64
 679 0062 0A43     		orr	r2, r1
 680 0064 D2B2     		uxtb	r2, r2
 681 0066 D2B2     		uxtb	r2, r2
 682 0068 5A70     		strb	r2, [r3, #1]
 371:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 372:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 373:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 374:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 375:../Generated_Code/Cpu.c ****                ));
 376:../Generated_Code/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 377:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 683              		.loc 1 377 0
 684 006a 364B     		ldr	r3, .L31+12
 685 006c 354A     		ldr	r2, .L31+12
 686 006e 9278     		ldrb	r2, [r2, #2]
 687 0070 D2B2     		uxtb	r2, r2
 688 0072 1921     		mov	r1, #25
 689 0074 8A43     		bic	r2, r1
 690 0076 D2B2     		uxtb	r2, r2
 691 0078 9A70     		strb	r2, [r3, #2]
 378:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 379:../Generated_Code/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 380:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 381:../Generated_Code/Cpu.c ****                );
 382:../Generated_Code/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 383:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 692              		.loc 1 383 0
 693 007a 334B     		ldr	r3, .L31+16
 694 007c 0022     		mov	r2, #0
 695 007e 1A70     		strb	r2, [r3]
 384:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 385:../Generated_Code/Cpu.c ****   /* PORTB_PCR0: ISF=0,MUX=0 */
 386:../Generated_Code/Cpu.c ****   PORTB_PCR0 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
 696              		.loc 1 386 0
 697 0080 324B     		ldr	r3, .L31+20
 698 0082 324A     		ldr	r2, .L31+20
 699 0084 1168     		ldr	r1, [r2]
 700 0086 2D4A     		ldr	r2, .L31+4
 701 0088 0A40     		and	r2, r1
 702 008a 1A60     		str	r2, [r3]
 387:../Generated_Code/Cpu.c ****   /* PORTB_PCR1: ISF=0,MUX=0 */
 388:../Generated_Code/Cpu.c ****   PORTB_PCR1 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
 703              		.loc 1 388 0
 704 008c 2F4B     		ldr	r3, .L31+20
 705 008e 2F4A     		ldr	r2, .L31+20
 706 0090 5168     		ldr	r1, [r2, #4]
 707 0092 2A4A     		ldr	r2, .L31+4
 708 0094 0A40     		and	r2, r1
 709 0096 5A60     		str	r2, [r3, #4]
 389:../Generated_Code/Cpu.c ****   /* PORTB_PCR2: ISF=0,MUX=0 */
 390:../Generated_Code/Cpu.c ****   PORTB_PCR2 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
 710              		.loc 1 390 0
 711 0098 2C4B     		ldr	r3, .L31+20
 712 009a 2C4A     		ldr	r2, .L31+20
 713 009c 9168     		ldr	r1, [r2, #8]
 714 009e 274A     		ldr	r2, .L31+4
 715 00a0 0A40     		and	r2, r1
 716 00a2 9A60     		str	r2, [r3, #8]
 391:../Generated_Code/Cpu.c ****   /* PORTB_PCR3: ISF=0,MUX=0 */
 392:../Generated_Code/Cpu.c ****   PORTB_PCR3 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
 717              		.loc 1 392 0
 718 00a4 294B     		ldr	r3, .L31+20
 719 00a6 294A     		ldr	r2, .L31+20
 720 00a8 D168     		ldr	r1, [r2, #12]
 721 00aa 244A     		ldr	r2, .L31+4
 722 00ac 0A40     		and	r2, r1
 723 00ae DA60     		str	r2, [r3, #12]
 393:../Generated_Code/Cpu.c ****   /* NVIC_IPR3: PRI_15=0 */
 394:../Generated_Code/Cpu.c ****   NVIC_IPR3 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_15(0xFF));
 724              		.loc 1 394 0
 725 00b0 274A     		ldr	r2, .L31+24
 726 00b2 2749     		ldr	r1, .L31+24
 727 00b4 C323     		mov	r3, #195
 728 00b6 9B00     		lsl	r3, r3, #2
 729 00b8 CB58     		ldr	r3, [r1, r3]
 730 00ba 1B02     		lsl	r3, r3, #8
 731 00bc 190A     		lsr	r1, r3, #8
 732 00be C323     		mov	r3, #195
 733 00c0 9B00     		lsl	r3, r3, #2
 734 00c2 D150     		str	r1, [r2, r3]
 395:../Generated_Code/Cpu.c ****   /* NVIC_ISER: SETENA|=1 */
 396:../Generated_Code/Cpu.c ****   NVIC_ISER |= NVIC_ISER_SETENA(0x01);
 735              		.loc 1 396 0
 736 00c4 224B     		ldr	r3, .L31+24
 737 00c6 224A     		ldr	r2, .L31+24
 738 00c8 1268     		ldr	r2, [r2]
 739 00ca 0121     		mov	r1, #1
 740 00cc 0A43     		orr	r2, r1
 741 00ce 1A60     		str	r2, [r3]
 397:../Generated_Code/Cpu.c ****   /* NVIC_IPR0: PRI_2=0,PRI_1=0,PRI_0=0 */
 398:../Generated_Code/Cpu.c ****   NVIC_IPR0 &= (uint32_t)~(uint32_t)(
 742              		.loc 1 398 0
 743 00d0 1F4A     		ldr	r2, .L31+24
 744 00d2 1F49     		ldr	r1, .L31+24
 745 00d4 C023     		mov	r3, #192
 746 00d6 9B00     		lsl	r3, r3, #2
 747 00d8 CB58     		ldr	r3, [r1, r3]
 748 00da 1B0E     		lsr	r3, r3, #24
 749 00dc 1906     		lsl	r1, r3, #24
 750 00de C023     		mov	r3, #192
 751 00e0 9B00     		lsl	r3, r3, #2
 752 00e2 D150     		str	r1, [r2, r3]
 399:../Generated_Code/Cpu.c ****                 NVIC_IP_PRI_2(0xFF) |
 400:../Generated_Code/Cpu.c ****                 NVIC_IP_PRI_1(0xFF) |
 401:../Generated_Code/Cpu.c ****                 NVIC_IP_PRI_0(0xFF)
 402:../Generated_Code/Cpu.c ****                );
 403:../Generated_Code/Cpu.c ****   /* PORTA_PCR20: ISF=0,MUX=7 */
 404:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 753              		.loc 1 404 0
 754 00e4 144B     		ldr	r3, .L31
 755 00e6 144A     		ldr	r2, .L31
 756 00e8 116D     		ldr	r1, [r2, #80]
 757 00ea 144A     		ldr	r2, .L31+4
 758 00ec 0A40     		and	r2, r1
 759 00ee E021     		mov	r1, #224
 760 00f0 C900     		lsl	r1, r1, #3
 761 00f2 0A43     		orr	r2, r1
 762 00f4 1A65     		str	r2, [r3, #80]
 405:../Generated_Code/Cpu.c ****                  PORT_PCR_ISF_MASK
 406:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 407:../Generated_Code/Cpu.c ****                  PORT_PCR_MUX(0x07)
 408:../Generated_Code/Cpu.c ****                 ));
 409:../Generated_Code/Cpu.c ****   /* NVIC_IPR1: PRI_6=0 */
 410:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));
 763              		.loc 1 410 0
 764 00f6 164A     		ldr	r2, .L31+24
 765 00f8 1549     		ldr	r1, .L31+24
 766 00fa C123     		mov	r3, #193
 767 00fc 9B00     		lsl	r3, r3, #2
 768 00fe C958     		ldr	r1, [r1, r3]
 769 0100 144B     		ldr	r3, .L31+28
 770 0102 1940     		and	r1, r3
 771 0104 C123     		mov	r3, #193
 772 0106 9B00     		lsl	r3, r3, #2
 773 0108 D150     		str	r1, [r2, r3]
 411:../Generated_Code/Cpu.c ****   /* ### Serial_LDD "IO1" component auto initialization. Auto initialization feature can be disable
 412:../Generated_Code/Cpu.c ****   (void)IO1_Init(NULL);
 774              		.loc 1 412 0
 775 010a 0020     		mov	r0, #0
 776 010c FFF7FEFF 		bl	IO1_Init
 413:../Generated_Code/Cpu.c ****   /* ### Init_ADC "ADC1" init code ... */
 414:../Generated_Code/Cpu.c ****   /* ### Call "ADC1_Init();" init method in a user code, i.e. in the main code */
 415:../Generated_Code/Cpu.c **** 
 416:../Generated_Code/Cpu.c ****   /* ### Note:   To enable automatic calling of the "ADC1" init code here,
 417:../Generated_Code/Cpu.c ****                  the 'Call Init method' property must be set to 'yes'.
 418:../Generated_Code/Cpu.c ****    */
 419:../Generated_Code/Cpu.c ****   /* ### Init_DMA "DMA1" init code ... */
 420:../Generated_Code/Cpu.c ****   /* ### Call "DMA1_Init();" init method in a user code, i.e. in the main code */
 421:../Generated_Code/Cpu.c **** 
 422:../Generated_Code/Cpu.c ****   /* ### Note:   To enable automatic calling of the "DMA1" init code here,
 423:../Generated_Code/Cpu.c ****                  the 'Call Init method' property must be set to 'yes'.
 424:../Generated_Code/Cpu.c ****    */
 425:../Generated_Code/Cpu.c ****   /* ### TimerUnit_LDD "TU1" component auto initialization. Auto initialization feature can be disa
 426:../Generated_Code/Cpu.c ****   (void)TU1_Init(NULL);
 777              		.loc 1 426 0
 778 0110 0020     		mov	r0, #0
 779 0112 FFF7FEFF 		bl	TU1_Init
 427:../Generated_Code/Cpu.c ****   /* ### BitIO_LDD "BitIoLdd1" component auto initialization. Auto initialization feature can be di
 428:../Generated_Code/Cpu.c ****   (void)BitIoLdd1_Init(NULL);
 780              		.loc 1 428 0
 781 0116 0020     		mov	r0, #0
 782 0118 FFF7FEFF 		bl	BitIoLdd1_Init
 429:../Generated_Code/Cpu.c ****   /* ### LED "IR" init code ... */
 430:../Generated_Code/Cpu.c ****   IR_Init(); /* initialize LED driver */
 783              		.loc 1 430 0
 784 011c 0E4B     		ldr	r3, .L31+32
 785 011e 9B68     		ldr	r3, [r3, #8]
 786 0120 181C     		mov	r0, r3
 787 0122 FFF7FEFF 		bl	BitIoLdd1_SetVal
 431:../Generated_Code/Cpu.c ****   /* ### PWM_LDD "PwmLdd1" component auto initialization. Auto initialization feature can be disabl
 432:../Generated_Code/Cpu.c ****   (void)PwmLdd1_Init(NULL);
 788              		.loc 1 432 0
 789 0126 0020     		mov	r0, #0
 790 0128 FFF7FEFF 		bl	PwmLdd1_Init
 433:../Generated_Code/Cpu.c ****   /* ### PWM_LDD "PwmLdd2" component auto initialization. Auto initialization feature can be disabl
 434:../Generated_Code/Cpu.c ****   (void)PwmLdd2_Init(NULL);
 791              		.loc 1 434 0
 792 012c 0020     		mov	r0, #0
 793 012e FFF7FEFF 		bl	PwmLdd2_Init
 435:../Generated_Code/Cpu.c ****   __EI();
 794              		.loc 1 435 0
 795              	@ 435 "../Generated_Code/Cpu.c" 1
 796 0132 62B6     		CPSIE i
 797              	@ 0 "" 2
 436:../Generated_Code/Cpu.c **** }
 798              		.loc 1 436 0
 799              		.code	16
 800 0134 BD46     		mov	sp, r7
 801              		@ sp needed for prologue
 802 0136 80BD     		pop	{r7, pc}
 803              	.L32:
 804              		.align	2
 805              	.L31:
 806 0138 00900440 		.word	1074040832
 807 013c FFF8FFFE 		.word	-16779009
 808 0140 00F00740 		.word	1074262016
 809 0144 00D00740 		.word	1074253824
 810 0148 00E00740 		.word	1074257920
 811 014c 00A00440 		.word	1074044928
 812 0150 00E100E0 		.word	-536813312
 813 0154 FFFF00FF 		.word	-16711681
 814 0158 00000000 		.word	PE_LDD_DeviceDataList
 815              		.cfi_endproc
 816              	.LFE7:
 818              		.text
 819              	.Letext0:
 820              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 821              		.file 3 "../Generated_Code/PE_Types.h"
 822              		.file 4 "C:/Freescale/CW MCU v10.6/MCU/ProcessorExpert/lib/Kinetis/iofiles/MKL25Z4.h"
 823              		.file 5 "../Generated_Code/Cpu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
                            *COM*:00000001 SR_reg
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:22     .bss.SR_lock:00000000 SR_lock
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:23     .bss.SR_lock:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:25     .text.Cpu_INT_NMIInterrupt:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:30     .text.Cpu_INT_NMIInterrupt:00000000 Cpu_INT_NMIInterrupt
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:53     .text.Cpu_INT_Hard_FaultInterrupt:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:58     .text.Cpu_INT_Hard_FaultInterrupt:00000000 Cpu_INT_Hard_FaultInterrupt
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:80     .text.Cpu_Interrupt:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:85     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:105    .text.Cpu_SetOperationMode:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:110    .text.Cpu_SetOperationMode:00000000 Cpu_SetOperationMode
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:298    .text.Cpu_SetOperationMode:0000010c $d
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:305    .text.Cpu_EnableInt:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:310    .text.Cpu_EnableInt:00000000 Cpu_EnableInt
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:335    .text.Cpu_DisableInt:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:340    .text.Cpu_DisableInt:00000000 Cpu_DisableInt
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:365    .text.__init_hardware:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:370    .text.__init_hardware:00000000 __init_hardware
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:592    .text.__init_hardware:00000154 $d
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:610    .text.PE_low_level_init:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:615    .text.PE_low_level_init:00000000 PE_low_level_init
C:\Users\Student\AppData\Local\Temp\ccXlRYnO.s:806    .text.PE_low_level_init:00000138 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Cpu_OnNMIINT
Cpu_OnHardFault
__vect_table
IO1_Init
TU1_Init
BitIoLdd1_Init
BitIoLdd1_SetVal
PwmLdd1_Init
PwmLdd2_Init
PE_LDD_DeviceDataList
