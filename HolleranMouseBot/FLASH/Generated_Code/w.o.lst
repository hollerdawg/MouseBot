   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"w.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.w_Wait10Cycles,"ax",%progbits
  18              		.align	2
  19              		.global	w_Wait10Cycles
  20              		.code	16
  21              		.thumb_func
  23              	w_Wait10Cycles:
  24              	.LFB0:
  25              		.file 1 "../Generated_Code/w.c"
   1:../Generated_Code/w.c **** /* ###################################################################
   2:../Generated_Code/w.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/w.c **** **     Filename    : w.c
   4:../Generated_Code/w.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/w.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/w.c **** **     Component   : Wait
   7:../Generated_Code/w.c **** **     Version     : Component 01.067, Driver 01.00, CPU db: 3.00.000
   8:../Generated_Code/w.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/w.c **** **     Date/Time   : 2014-11-13, 23:59, # CodeGen: 85
  10:../Generated_Code/w.c **** **     Abstract    :
  11:../Generated_Code/w.c **** **          Implements busy waiting routines.
  12:../Generated_Code/w.c **** **     Settings    :
  13:../Generated_Code/w.c **** **          Component name                                 : w
  14:../Generated_Code/w.c **** **          Manual Clock Values                            : Disabled
  15:../Generated_Code/w.c **** **          Delay100usFunction                             : Delay100US
  16:../Generated_Code/w.c **** **          RTOS                                           : Disabled
  17:../Generated_Code/w.c **** **          Watchdog                                       : Disabled
  18:../Generated_Code/w.c **** **     Contents    :
  19:../Generated_Code/w.c **** **         Wait10Cycles   - void w_Wait10Cycles(void);
  20:../Generated_Code/w.c **** **         Wait100Cycles  - void w_Wait100Cycles(void);
  21:../Generated_Code/w.c **** **         WaitCycles     - void w_WaitCycles(uint16_t cycles);
  22:../Generated_Code/w.c **** **         WaitLongCycles - void w_WaitLongCycles(uint32_t cycles);
  23:../Generated_Code/w.c **** **         Waitms         - void w_Waitms(uint16_t ms);
  24:../Generated_Code/w.c **** **         Waitus         - void w_Waitus(uint16_t us);
  25:../Generated_Code/w.c **** **         Waitns         - void w_Waitns(uint16_t ns);
  26:../Generated_Code/w.c **** **         WaitOSms       - void w_WaitOSms(void);
  27:../Generated_Code/w.c **** **
  28:../Generated_Code/w.c **** **     License   : Open Source (LGPL)
  29:../Generated_Code/w.c **** **     Copyright : Erich Styger, 2013-2014, all rights reserved.
  30:../Generated_Code/w.c **** **     Web       : www.mcuoneclipse.com
  31:../Generated_Code/w.c **** **     This an open source software implementing waiting routines using Processor Expert.
  32:../Generated_Code/w.c **** **     This is a free software and is opened for education,  research  and commercial developments 
  33:../Generated_Code/w.c **** **     * This is a free software and there is NO WARRANTY.
  34:../Generated_Code/w.c **** **     * No restriction on use. You can use, modify and redistribute it for personal, non-profit or
  35:../Generated_Code/w.c **** **     * Redistributions of source code must retain the above copyright notice.
  36:../Generated_Code/w.c **** ** ###################################################################*/
  37:../Generated_Code/w.c **** /*!
  38:../Generated_Code/w.c **** ** @file w.c
  39:../Generated_Code/w.c **** ** @version 01.00
  40:../Generated_Code/w.c **** ** @brief
  41:../Generated_Code/w.c **** **          Implements busy waiting routines.
  42:../Generated_Code/w.c **** */         
  43:../Generated_Code/w.c **** /*!
  44:../Generated_Code/w.c **** **  @addtogroup w_module w module documentation
  45:../Generated_Code/w.c **** **  @{
  46:../Generated_Code/w.c **** */         
  47:../Generated_Code/w.c **** 
  48:../Generated_Code/w.c **** /* MODULE w. */
  49:../Generated_Code/w.c **** 
  50:../Generated_Code/w.c **** #include "w.h"
  51:../Generated_Code/w.c **** 
  52:../Generated_Code/w.c **** 
  53:../Generated_Code/w.c **** /*
  54:../Generated_Code/w.c **** ** ===================================================================
  55:../Generated_Code/w.c **** **     Method      :  w_Wait10Cycles (component Wait)
  56:../Generated_Code/w.c **** **     Description :
  57:../Generated_Code/w.c **** **         Wait for 10 CPU cycles.
  58:../Generated_Code/w.c **** **     Parameters  : None
  59:../Generated_Code/w.c **** **     Returns     : Nothing
  60:../Generated_Code/w.c **** ** ===================================================================
  61:../Generated_Code/w.c **** */
  62:../Generated_Code/w.c **** __attribute__((naked)) void w_Wait10Cycles(void)
  63:../Generated_Code/w.c **** {
  26              		.loc 1 63 0
  27              		.cfi_startproc
  64:../Generated_Code/w.c ****   /* This function will wait 10 CPU cycles (including call overhead). */
  65:../Generated_Code/w.c ****   /* NOTE: Cortex-M0 and M4 have 1 cycle for a NOP */
  66:../Generated_Code/w.c ****   /* Compiler is GNUC */
  67:../Generated_Code/w.c ****   __asm (
  28              		.loc 1 67 0
  29              	@ 67 "../Generated_Code/w.c" 1
  30 0000 C046     		nop   
  31 0002 C046     		nop   
  32 0004 C046     		nop   
  33 0006 7047     		bx lr 
  34              		
  35              	@ 0 "" 2
  68:../Generated_Code/w.c ****    /* bl Wai10Cycles() to here: [4] */
  69:../Generated_Code/w.c ****    "nop   \n\t" /* [1] */
  70:../Generated_Code/w.c ****    "nop   \n\t" /* [1] */
  71:../Generated_Code/w.c ****    "nop   \n\t" /* [1] */
  72:../Generated_Code/w.c ****    "bx lr \n\t" /* [3] */
  73:../Generated_Code/w.c ****   );
  74:../Generated_Code/w.c **** }
  36              		.loc 1 74 0
  37              		.code	16
  38              		.cfi_endproc
  39              	.LFE0:
  41              		.section	.text.w_Wait100Cycles,"ax",%progbits
  42              		.align	2
  43              		.global	w_Wait100Cycles
  44              		.code	16
  45              		.thumb_func
  47              	w_Wait100Cycles:
  48              	.LFB1:
  75:../Generated_Code/w.c **** 
  76:../Generated_Code/w.c **** /*
  77:../Generated_Code/w.c **** ** ===================================================================
  78:../Generated_Code/w.c **** **     Method      :  w_Wait100Cycles (component Wait)
  79:../Generated_Code/w.c **** **     Description :
  80:../Generated_Code/w.c **** **         Wait for 100 CPU cycles.
  81:../Generated_Code/w.c **** **     Parameters  : None
  82:../Generated_Code/w.c **** **     Returns     : Nothing
  83:../Generated_Code/w.c **** ** ===================================================================
  84:../Generated_Code/w.c **** */
  85:../Generated_Code/w.c **** __attribute__((naked)) void w_Wait100Cycles(void)
  86:../Generated_Code/w.c **** {
  49              		.loc 1 86 0
  50              		.cfi_startproc
  87:../Generated_Code/w.c ****   /* This function will spend 100 CPU cycles (including call overhead). */
  88:../Generated_Code/w.c ****   __asm (
  51              		.loc 1 88 0
  52              	@ 88 "../Generated_Code/w.c" 1
  53 0000 0020     		movs r0, #0 
  54              		loop:       
  55 0002 C046     		nop         
  56 0004 C046     		nop         
  57 0006 C046     		nop         
  58 0008 C046     		nop         
  59 000a C046     		nop         
  60 000c 0130     		add r0,#1   
  61 000e 0928     		cmp r0,#9   
  62 0010 F7D9     		bls loop    
  63 0012 C046     		nop         
  64 0014 7047     		bx lr       
  65              		
  66              	@ 0 "" 2
  89:../Generated_Code/w.c ****    /* bl to here:               [4] */
  90:../Generated_Code/w.c ****    "movs r0, #0 \n\t"        /* [1] */
  91:../Generated_Code/w.c ****    "loop:       \n\t"
  92:../Generated_Code/w.c ****    "nop         \n\t"        /* [1] */
  93:../Generated_Code/w.c ****    "nop         \n\t"        /* [1] */
  94:../Generated_Code/w.c ****    "nop         \n\t"        /* [1] */
  95:../Generated_Code/w.c ****    "nop         \n\t"        /* [1] */
  96:../Generated_Code/w.c ****    "nop         \n\t"        /* [1] */
  97:../Generated_Code/w.c ****    "add r0,#1   \n\t"        /* [1] */
  98:../Generated_Code/w.c ****    "cmp r0,#9   \n\t"        /* [1] */
  99:../Generated_Code/w.c ****    "bls loop    \n\t"        /* [3] taken, [1] not taken */
 100:../Generated_Code/w.c ****    "nop         \n\t"        /* [1] */
 101:../Generated_Code/w.c ****    "bx lr       \n\t"        /* [3] */
 102:../Generated_Code/w.c ****   );
 103:../Generated_Code/w.c **** }
  67              		.loc 1 103 0
  68              		.code	16
  69              		.cfi_endproc
  70              	.LFE1:
  72 0016 C046     		.section	.text.w_WaitCycles,"ax",%progbits
  73              		.align	2
  74              		.global	w_WaitCycles
  75              		.code	16
  76              		.thumb_func
  78              	w_WaitCycles:
  79              	.LFB2:
 104:../Generated_Code/w.c **** 
 105:../Generated_Code/w.c **** /*
 106:../Generated_Code/w.c **** ** ===================================================================
 107:../Generated_Code/w.c **** **     Method      :  w_WaitCycles (component Wait)
 108:../Generated_Code/w.c **** **     Description :
 109:../Generated_Code/w.c **** **         Wait for a specified number of CPU cycles (16bit data type).
 110:../Generated_Code/w.c **** **     Parameters  :
 111:../Generated_Code/w.c **** **         NAME            - DESCRIPTION
 112:../Generated_Code/w.c **** **         cycles          - The number of cycles to wait.
 113:../Generated_Code/w.c **** **     Returns     : Nothing
 114:../Generated_Code/w.c **** ** ===================================================================
 115:../Generated_Code/w.c **** */
 116:../Generated_Code/w.c **** void w_WaitCycles(uint16_t cycles)
 117:../Generated_Code/w.c **** {
  80              		.loc 1 117 0
  81              		.cfi_startproc
  82 0000 80B5     		push	{r7, lr}
  83              	.LCFI0:
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 7, -8
  86              		.cfi_offset 14, -4
  87 0002 82B0     		sub	sp, sp, #8
  88              	.LCFI1:
  89              		.cfi_def_cfa_offset 16
  90 0004 00AF     		add	r7, sp, #0
  91              	.LCFI2:
  92              		.cfi_def_cfa_register 7
  93 0006 021C     		mov	r2, r0
  94 0008 BB1D     		add	r3, r7, #6
  95 000a 1A80     		strh	r2, [r3]
 118:../Generated_Code/w.c ****   while(cycles > 100) {
  96              		.loc 1 118 0
  97 000c 06E0     		b	.L4
  98              	.L5:
 119:../Generated_Code/w.c ****     w_Wait100Cycles();
  99              		.loc 1 119 0
 100 000e FFF7FEFF 		bl	w_Wait100Cycles
 120:../Generated_Code/w.c ****     cycles -= 100;
 101              		.loc 1 120 0
 102 0012 BB1D     		add	r3, r7, #6
 103 0014 BA1D     		add	r2, r7, #6
 104 0016 1288     		ldrh	r2, [r2]
 105 0018 643A     		sub	r2, r2, #100
 106 001a 1A80     		strh	r2, [r3]
 107              	.L4:
 118:../Generated_Code/w.c ****   while(cycles > 100) {
 108              		.loc 1 118 0
 109 001c BB1D     		add	r3, r7, #6
 110 001e 1B88     		ldrh	r3, [r3]
 111 0020 642B     		cmp	r3, #100
 112 0022 F4D8     		bhi	.L5
 121:../Generated_Code/w.c ****   }
 122:../Generated_Code/w.c ****   while(cycles > 10) {
 113              		.loc 1 122 0
 114 0024 06E0     		b	.L6
 115              	.L7:
 123:../Generated_Code/w.c ****     w_Wait10Cycles();
 116              		.loc 1 123 0
 117 0026 FFF7FEFF 		bl	w_Wait10Cycles
 124:../Generated_Code/w.c ****     cycles -= 10;
 118              		.loc 1 124 0
 119 002a BB1D     		add	r3, r7, #6
 120 002c BA1D     		add	r2, r7, #6
 121 002e 1288     		ldrh	r2, [r2]
 122 0030 0A3A     		sub	r2, r2, #10
 123 0032 1A80     		strh	r2, [r3]
 124              	.L6:
 122:../Generated_Code/w.c ****   while(cycles > 10) {
 125              		.loc 1 122 0
 126 0034 BB1D     		add	r3, r7, #6
 127 0036 1B88     		ldrh	r3, [r3]
 128 0038 0A2B     		cmp	r3, #10
 129 003a F4D8     		bhi	.L7
 125:../Generated_Code/w.c ****   }
 126:../Generated_Code/w.c **** }
 130              		.loc 1 126 0
 131 003c BD46     		mov	sp, r7
 132 003e 02B0     		add	sp, sp, #8
 133              		@ sp needed for prologue
 134 0040 80BD     		pop	{r7, pc}
 135              		.cfi_endproc
 136              	.LFE2:
 138 0042 C046     		.section	.text.w_WaitLongCycles,"ax",%progbits
 139              		.align	2
 140              		.global	w_WaitLongCycles
 141              		.code	16
 142              		.thumb_func
 144              	w_WaitLongCycles:
 145              	.LFB3:
 127:../Generated_Code/w.c **** 
 128:../Generated_Code/w.c **** /*
 129:../Generated_Code/w.c **** ** ===================================================================
 130:../Generated_Code/w.c **** **     Method      :  w_WaitLongCycles (component Wait)
 131:../Generated_Code/w.c **** **     Description :
 132:../Generated_Code/w.c **** **         Wait for a specified number of CPU cycles (32bit data type).
 133:../Generated_Code/w.c **** **     Parameters  :
 134:../Generated_Code/w.c **** **         NAME            - DESCRIPTION
 135:../Generated_Code/w.c **** **         cycles          - The number of cycles to wait.
 136:../Generated_Code/w.c **** **     Returns     : Nothing
 137:../Generated_Code/w.c **** ** ===================================================================
 138:../Generated_Code/w.c **** */
 139:../Generated_Code/w.c **** void w_WaitLongCycles(uint32_t cycles)
 140:../Generated_Code/w.c **** {
 146              		.loc 1 140 0
 147              		.cfi_startproc
 148 0000 80B5     		push	{r7, lr}
 149              	.LCFI3:
 150              		.cfi_def_cfa_offset 8
 151              		.cfi_offset 7, -8
 152              		.cfi_offset 14, -4
 153 0002 82B0     		sub	sp, sp, #8
 154              	.LCFI4:
 155              		.cfi_def_cfa_offset 16
 156 0004 00AF     		add	r7, sp, #0
 157              	.LCFI5:
 158              		.cfi_def_cfa_register 7
 159 0006 7860     		str	r0, [r7, #4]
 141:../Generated_Code/w.c ****   while(cycles>60000) {
 160              		.loc 1 141 0
 161 0008 07E0     		b	.L9
 162              	.L10:
 142:../Generated_Code/w.c ****     w_WaitCycles(60000);
 163              		.loc 1 142 0
 164 000a 0A4B     		ldr	r3, .L11
 165 000c 181C     		mov	r0, r3
 166 000e FFF7FEFF 		bl	w_WaitCycles
 143:../Generated_Code/w.c ****     cycles -= 60000;
 167              		.loc 1 143 0
 168 0012 7B68     		ldr	r3, [r7, #4]
 169 0014 084A     		ldr	r2, .L11+4
 170 0016 9B18     		add	r3, r3, r2
 171 0018 7B60     		str	r3, [r7, #4]
 172              	.L9:
 141:../Generated_Code/w.c ****   while(cycles>60000) {
 173              		.loc 1 141 0
 174 001a 7A68     		ldr	r2, [r7, #4]
 175 001c 054B     		ldr	r3, .L11
 176 001e 9A42     		cmp	r2, r3
 177 0020 F3D8     		bhi	.L10
 144:../Generated_Code/w.c ****   }
 145:../Generated_Code/w.c ****   w_WaitCycles((uint16_t)cycles);
 178              		.loc 1 145 0
 179 0022 7B68     		ldr	r3, [r7, #4]
 180 0024 9BB2     		uxth	r3, r3
 181 0026 181C     		mov	r0, r3
 182 0028 FFF7FEFF 		bl	w_WaitCycles
 146:../Generated_Code/w.c **** }
 183              		.loc 1 146 0
 184 002c BD46     		mov	sp, r7
 185 002e 02B0     		add	sp, sp, #8
 186              		@ sp needed for prologue
 187 0030 80BD     		pop	{r7, pc}
 188              	.L12:
 189 0032 C046     		.align	2
 190              	.L11:
 191 0034 60EA0000 		.word	60000
 192 0038 A015FFFF 		.word	-60000
 193              		.cfi_endproc
 194              	.LFE3:
 196              		.section	.text.w_Waitms,"ax",%progbits
 197              		.align	2
 198              		.global	w_Waitms
 199              		.code	16
 200              		.thumb_func
 202              	w_Waitms:
 203              	.LFB4:
 147:../Generated_Code/w.c **** 
 148:../Generated_Code/w.c **** /*
 149:../Generated_Code/w.c **** ** ===================================================================
 150:../Generated_Code/w.c **** **     Method      :  w_Waitms (component Wait)
 151:../Generated_Code/w.c **** **     Description :
 152:../Generated_Code/w.c **** **         Wait for a specified time in milliseconds.
 153:../Generated_Code/w.c **** **     Parameters  :
 154:../Generated_Code/w.c **** **         NAME            - DESCRIPTION
 155:../Generated_Code/w.c **** **         ms              - How many milliseconds the function has to
 156:../Generated_Code/w.c **** **                           wait
 157:../Generated_Code/w.c **** **     Returns     : Nothing
 158:../Generated_Code/w.c **** ** ===================================================================
 159:../Generated_Code/w.c **** */
 160:../Generated_Code/w.c **** void w_Waitms(uint16_t ms)
 161:../Generated_Code/w.c **** {
 204              		.loc 1 161 0
 205              		.cfi_startproc
 206 0000 80B5     		push	{r7, lr}
 207              	.LCFI6:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 7, -8
 210              		.cfi_offset 14, -4
 211 0002 84B0     		sub	sp, sp, #16
 212              	.LCFI7:
 213              		.cfi_def_cfa_offset 24
 214 0004 00AF     		add	r7, sp, #0
 215              	.LCFI8:
 216              		.cfi_def_cfa_register 7
 217 0006 021C     		mov	r2, r0
 218 0008 BB1D     		add	r3, r7, #6
 219 000a 1A80     		strh	r2, [r3]
 162:../Generated_Code/w.c ****   uint32_t msCycles; /* cycles for 1 ms */
 163:../Generated_Code/w.c **** 
 164:../Generated_Code/w.c ****   /* static clock/speed configuration */
 165:../Generated_Code/w.c ****   msCycles = w_NofCyclesMs(1, CPU_CORE_CLK_HZ);
 220              		.loc 1 165 0
 221 000c 094B     		ldr	r3, .L16
 222 000e FB60     		str	r3, [r7, #12]
 166:../Generated_Code/w.c ****   while(ms>0) {
 223              		.loc 1 166 0
 224 0010 08E0     		b	.L14
 225              	.L15:
 167:../Generated_Code/w.c ****     w_WaitLongCycles(msCycles);
 226              		.loc 1 167 0
 227 0012 FB68     		ldr	r3, [r7, #12]
 228 0014 181C     		mov	r0, r3
 229 0016 FFF7FEFF 		bl	w_WaitLongCycles
 168:../Generated_Code/w.c ****     ms--;
 230              		.loc 1 168 0
 231 001a BB1D     		add	r3, r7, #6
 232 001c BA1D     		add	r2, r7, #6
 233 001e 1288     		ldrh	r2, [r2]
 234 0020 013A     		sub	r2, r2, #1
 235 0022 1A80     		strh	r2, [r3]
 236              	.L14:
 166:../Generated_Code/w.c ****   while(ms>0) {
 237              		.loc 1 166 0
 238 0024 BB1D     		add	r3, r7, #6
 239 0026 1B88     		ldrh	r3, [r3]
 240 0028 002B     		cmp	r3, #0
 241 002a F2D1     		bne	.L15
 169:../Generated_Code/w.c ****   }
 170:../Generated_Code/w.c **** }
 242              		.loc 1 170 0
 243 002c BD46     		mov	sp, r7
 244 002e 04B0     		add	sp, sp, #16
 245              		@ sp needed for prologue
 246 0030 80BD     		pop	{r7, pc}
 247              	.L17:
 248 0032 C046     		.align	2
 249              	.L16:
 250 0034 80BB0000 		.word	48000
 251              		.cfi_endproc
 252              	.LFE4:
 254              		.text
 255              	.Letext0:
 256              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
DEFINED SYMBOLS
                            *ABS*:00000000 w.c
C:\Users\Student\AppData\Local\Temp\ccN9aa8E.s:18     .text.w_Wait10Cycles:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccN9aa8E.s:23     .text.w_Wait10Cycles:00000000 w_Wait10Cycles
C:\Users\Student\AppData\Local\Temp\ccN9aa8E.s:42     .text.w_Wait100Cycles:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccN9aa8E.s:47     .text.w_Wait100Cycles:00000000 w_Wait100Cycles
C:\Users\Student\AppData\Local\Temp\ccN9aa8E.s:54     .text.w_Wait100Cycles:00000002 loop
C:\Users\Student\AppData\Local\Temp\ccN9aa8E.s:73     .text.w_WaitCycles:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccN9aa8E.s:78     .text.w_WaitCycles:00000000 w_WaitCycles
C:\Users\Student\AppData\Local\Temp\ccN9aa8E.s:139    .text.w_WaitLongCycles:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccN9aa8E.s:144    .text.w_WaitLongCycles:00000000 w_WaitLongCycles
C:\Users\Student\AppData\Local\Temp\ccN9aa8E.s:191    .text.w_WaitLongCycles:00000034 $d
C:\Users\Student\AppData\Local\Temp\ccN9aa8E.s:197    .text.w_Waitms:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccN9aa8E.s:202    .text.w_Waitms:00000000 w_Waitms
C:\Users\Student\AppData\Local\Temp\ccN9aa8E.s:250    .text.w_Waitms:00000034 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
