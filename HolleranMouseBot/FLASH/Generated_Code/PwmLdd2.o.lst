   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PwmLdd2.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	12
  22      00000000 
  22      00000000 
  23              		.section	.text.PwmLdd2_Init,"ax",%progbits
  24              		.align	2
  25              		.global	PwmLdd2_Init
  26              		.code	16
  27              		.thumb_func
  29              	PwmLdd2_Init:
  30              	.LFB0:
  31              		.file 1 "../Generated_Code/PwmLdd2.c"
   1:../Generated_Code/PwmLdd2.c **** /* ###################################################################
   2:../Generated_Code/PwmLdd2.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/PwmLdd2.c **** **     Filename    : PwmLdd2.c
   4:../Generated_Code/PwmLdd2.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/PwmLdd2.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/PwmLdd2.c **** **     Component   : PWM_LDD
   7:../Generated_Code/PwmLdd2.c **** **     Version     : Component 01.013, Driver 01.03, CPU db: 3.00.000
   8:../Generated_Code/PwmLdd2.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/PwmLdd2.c **** **     Date/Time   : 2014-11-15, 18:04, # CodeGen: 88
  10:../Generated_Code/PwmLdd2.c **** **     Abstract    :
  11:../Generated_Code/PwmLdd2.c **** **          This component implements a pulse-width modulation generator
  12:../Generated_Code/PwmLdd2.c **** **          that generates signal with variable duty and fixed cycle.
  13:../Generated_Code/PwmLdd2.c **** **          This PWM component provides a high level API for unified
  14:../Generated_Code/PwmLdd2.c **** **          hardware access to various timer devices using the TimerUnit
  15:../Generated_Code/PwmLdd2.c **** **          component.
  16:../Generated_Code/PwmLdd2.c **** **     Settings    :
  17:../Generated_Code/PwmLdd2.c **** **          Component name                                 : PwmLdd2
  18:../Generated_Code/PwmLdd2.c **** **          Period device                                  : TPM0_MOD
  19:../Generated_Code/PwmLdd2.c **** **          Duty device                                    : TPM0_C1V
  20:../Generated_Code/PwmLdd2.c **** **          Output pin                                     : ADC0_SE5b/PTD1/SPI0_SCK/TPM0_CH1
  21:../Generated_Code/PwmLdd2.c **** **          Output pin signal                              : 
  22:../Generated_Code/PwmLdd2.c **** **          Counter                                        : TPM0_CNT
  23:../Generated_Code/PwmLdd2.c **** **          Interrupt service/event                        : Disabled
  24:../Generated_Code/PwmLdd2.c **** **          Period                                         : 22 ms
  25:../Generated_Code/PwmLdd2.c **** **          Starting pulse width                           : 20500 µs
  26:../Generated_Code/PwmLdd2.c **** **          Initial polarity                               : low
  27:../Generated_Code/PwmLdd2.c **** **          Initialization                                 : 
  28:../Generated_Code/PwmLdd2.c **** **            Enabled in init. code                        : yes
  29:../Generated_Code/PwmLdd2.c **** **            Auto initialization                          : yes
  30:../Generated_Code/PwmLdd2.c **** **            Event mask                                   : 
  31:../Generated_Code/PwmLdd2.c **** **              OnEnd                                      : Disabled
  32:../Generated_Code/PwmLdd2.c **** **          CPU clock/configuration selection              : 
  33:../Generated_Code/PwmLdd2.c **** **            Clock configuration 0                        : This component enabled
  34:../Generated_Code/PwmLdd2.c **** **            Clock configuration 1                        : This component disabled
  35:../Generated_Code/PwmLdd2.c **** **            Clock configuration 2                        : This component disabled
  36:../Generated_Code/PwmLdd2.c **** **            Clock configuration 3                        : This component disabled
  37:../Generated_Code/PwmLdd2.c **** **            Clock configuration 4                        : This component disabled
  38:../Generated_Code/PwmLdd2.c **** **            Clock configuration 5                        : This component disabled
  39:../Generated_Code/PwmLdd2.c **** **            Clock configuration 6                        : This component disabled
  40:../Generated_Code/PwmLdd2.c **** **            Clock configuration 7                        : This component disabled
  41:../Generated_Code/PwmLdd2.c **** **          Referenced components                          : 
  42:../Generated_Code/PwmLdd2.c **** **            Linked component                             : TU2
  43:../Generated_Code/PwmLdd2.c **** **     Contents    :
  44:../Generated_Code/PwmLdd2.c **** **         Init       - LDD_TDeviceData* PwmLdd2_Init(LDD_TUserData *UserDataPtr);
  45:../Generated_Code/PwmLdd2.c **** **         SetRatio16 - LDD_TError PwmLdd2_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Rati
  46:../Generated_Code/PwmLdd2.c **** **         SetDutyUS  - LDD_TError PwmLdd2_SetDutyUS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time)
  47:../Generated_Code/PwmLdd2.c **** **         SetDutyMS  - LDD_TError PwmLdd2_SetDutyMS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time)
  48:../Generated_Code/PwmLdd2.c **** **
  49:../Generated_Code/PwmLdd2.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  50:../Generated_Code/PwmLdd2.c **** **     All Rights Reserved.
  51:../Generated_Code/PwmLdd2.c **** **     
  52:../Generated_Code/PwmLdd2.c **** **     Redistribution and use in source and binary forms, with or without modification,
  53:../Generated_Code/PwmLdd2.c **** **     are permitted provided that the following conditions are met:
  54:../Generated_Code/PwmLdd2.c **** **     
  55:../Generated_Code/PwmLdd2.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  56:../Generated_Code/PwmLdd2.c **** **       of conditions and the following disclaimer.
  57:../Generated_Code/PwmLdd2.c **** **     
  58:../Generated_Code/PwmLdd2.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  59:../Generated_Code/PwmLdd2.c **** **       list of conditions and the following disclaimer in the documentation and/or
  60:../Generated_Code/PwmLdd2.c **** **       other materials provided with the distribution.
  61:../Generated_Code/PwmLdd2.c **** **     
  62:../Generated_Code/PwmLdd2.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  63:../Generated_Code/PwmLdd2.c **** **       contributors may be used to endorse or promote products derived from this
  64:../Generated_Code/PwmLdd2.c **** **       software without specific prior written permission.
  65:../Generated_Code/PwmLdd2.c **** **     
  66:../Generated_Code/PwmLdd2.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  67:../Generated_Code/PwmLdd2.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  68:../Generated_Code/PwmLdd2.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  69:../Generated_Code/PwmLdd2.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  70:../Generated_Code/PwmLdd2.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  71:../Generated_Code/PwmLdd2.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  72:../Generated_Code/PwmLdd2.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  73:../Generated_Code/PwmLdd2.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  74:../Generated_Code/PwmLdd2.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  75:../Generated_Code/PwmLdd2.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  76:../Generated_Code/PwmLdd2.c **** **     
  77:../Generated_Code/PwmLdd2.c **** **     http: www.freescale.com
  78:../Generated_Code/PwmLdd2.c **** **     mail: support@freescale.com
  79:../Generated_Code/PwmLdd2.c **** ** ###################################################################*/
  80:../Generated_Code/PwmLdd2.c **** /*!
  81:../Generated_Code/PwmLdd2.c **** ** @file PwmLdd2.c
  82:../Generated_Code/PwmLdd2.c **** ** @version 01.03
  83:../Generated_Code/PwmLdd2.c **** ** @brief
  84:../Generated_Code/PwmLdd2.c **** **          This component implements a pulse-width modulation generator
  85:../Generated_Code/PwmLdd2.c **** **          that generates signal with variable duty and fixed cycle.
  86:../Generated_Code/PwmLdd2.c **** **          This PWM component provides a high level API for unified
  87:../Generated_Code/PwmLdd2.c **** **          hardware access to various timer devices using the TimerUnit
  88:../Generated_Code/PwmLdd2.c **** **          component.
  89:../Generated_Code/PwmLdd2.c **** */         
  90:../Generated_Code/PwmLdd2.c **** /*!
  91:../Generated_Code/PwmLdd2.c **** **  @addtogroup PwmLdd2_module PwmLdd2 module documentation
  92:../Generated_Code/PwmLdd2.c **** **  @{
  93:../Generated_Code/PwmLdd2.c **** */         
  94:../Generated_Code/PwmLdd2.c **** 
  95:../Generated_Code/PwmLdd2.c **** /* MODULE PwmLdd2. */
  96:../Generated_Code/PwmLdd2.c **** 
  97:../Generated_Code/PwmLdd2.c **** #include "PwmLdd2.h"
  98:../Generated_Code/PwmLdd2.c **** /* {Default RTOS Adapter} No RTOS includes */
  99:../Generated_Code/PwmLdd2.c **** 
 100:../Generated_Code/PwmLdd2.c **** #ifdef __cplusplus
 101:../Generated_Code/PwmLdd2.c **** extern "C" {
 102:../Generated_Code/PwmLdd2.c **** #endif 
 103:../Generated_Code/PwmLdd2.c **** 
 104:../Generated_Code/PwmLdd2.c **** typedef struct {
 105:../Generated_Code/PwmLdd2.c ****   LDD_TDeviceData *LinkedDeviceDataPtr;
 106:../Generated_Code/PwmLdd2.c ****   bool EnUser;                         /* Enable/Disable device */
 107:../Generated_Code/PwmLdd2.c ****   uint16_t RatioStore;                 /* Ratio of L-level to H-level */
 108:../Generated_Code/PwmLdd2.c ****   LDD_TUserData *UserDataPtr;          /* RTOS device data structure */
 109:../Generated_Code/PwmLdd2.c **** } PwmLdd2_TDeviceData;
 110:../Generated_Code/PwmLdd2.c **** 
 111:../Generated_Code/PwmLdd2.c **** typedef PwmLdd2_TDeviceData *PwmLdd2_TDeviceDataPtr; /* Pointer to the device data structure. */
 112:../Generated_Code/PwmLdd2.c **** 
 113:../Generated_Code/PwmLdd2.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 114:../Generated_Code/PwmLdd2.c **** static PwmLdd2_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 115:../Generated_Code/PwmLdd2.c **** 
 116:../Generated_Code/PwmLdd2.c **** #define CHANNEL 0x01U
 117:../Generated_Code/PwmLdd2.c **** /* Internal method prototypes */
 118:../Generated_Code/PwmLdd2.c **** static void SetRatio(LDD_TDeviceData *DeviceDataPtr);
 119:../Generated_Code/PwmLdd2.c **** /*
 120:../Generated_Code/PwmLdd2.c **** ** ===================================================================
 121:../Generated_Code/PwmLdd2.c **** **     Method      :  PwmLdd2_Init (component PWM_LDD)
 122:../Generated_Code/PwmLdd2.c **** */
 123:../Generated_Code/PwmLdd2.c **** /*!
 124:../Generated_Code/PwmLdd2.c **** **     @brief
 125:../Generated_Code/PwmLdd2.c **** **         Initializes the device. Allocates memory for the device data
 126:../Generated_Code/PwmLdd2.c **** **         structure, allocates interrupt vectors and sets interrupt
 127:../Generated_Code/PwmLdd2.c **** **         priority, sets pin routing, sets timing, etc. If the
 128:../Generated_Code/PwmLdd2.c **** **         property ["Enable in init. code"] is set to "yes" value then
 129:../Generated_Code/PwmLdd2.c **** **         the device is also enabled (see the description of the
 130:../Generated_Code/PwmLdd2.c **** **         [Enable] method). In this case the [Enable] method is not
 131:../Generated_Code/PwmLdd2.c **** **         necessary and needn't to be generated. This method can be
 132:../Generated_Code/PwmLdd2.c **** **         called only once. Before the second call of Init the [Deinit]
 133:../Generated_Code/PwmLdd2.c **** **         must be called first.
 134:../Generated_Code/PwmLdd2.c **** **     @param
 135:../Generated_Code/PwmLdd2.c **** **         UserDataPtr     - Pointer to the user or
 136:../Generated_Code/PwmLdd2.c **** **                           RTOS specific data. This pointer will be
 137:../Generated_Code/PwmLdd2.c **** **                           passed as an event or callback parameter.
 138:../Generated_Code/PwmLdd2.c **** **     @return
 139:../Generated_Code/PwmLdd2.c **** **                         - Pointer to the dynamically allocated private
 140:../Generated_Code/PwmLdd2.c **** **                           structure or NULL if there was an error.
 141:../Generated_Code/PwmLdd2.c **** */
 142:../Generated_Code/PwmLdd2.c **** /* ===================================================================*/
 143:../Generated_Code/PwmLdd2.c **** LDD_TDeviceData* PwmLdd2_Init(LDD_TUserData *UserDataPtr)
 144:../Generated_Code/PwmLdd2.c **** {
  32              		.loc 1 144 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
 145:../Generated_Code/PwmLdd2.c ****   /* Allocate device structure */
 146:../Generated_Code/PwmLdd2.c ****   PwmLdd2_TDeviceData *DeviceDataPrv;
 147:../Generated_Code/PwmLdd2.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 148:../Generated_Code/PwmLdd2.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  46              		.loc 1 148 0
  47 0008 104B     		ldr	r3, .L4
  48 000a FB60     		str	r3, [r7, #12]
 149:../Generated_Code/PwmLdd2.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  49              		.loc 1 149 0
  50 000c FB68     		ldr	r3, [r7, #12]
  51 000e 7A68     		ldr	r2, [r7, #4]
  52 0010 9A60     		str	r2, [r3, #8]
 150:../Generated_Code/PwmLdd2.c ****   DeviceDataPrv->EnUser = TRUE;        /* Set the flag "device enabled" */
  53              		.loc 1 150 0
  54 0012 FB68     		ldr	r3, [r7, #12]
  55 0014 0122     		mov	r2, #1
  56 0016 1A71     		strb	r2, [r3, #4]
 151:../Generated_Code/PwmLdd2.c ****   DeviceDataPrv->RatioStore = 0xF03CU; /* Ratio after initialization */
  57              		.loc 1 151 0
  58 0018 FB68     		ldr	r3, [r7, #12]
  59 001a 0D4A     		ldr	r2, .L4+4
  60 001c DA80     		strh	r2, [r3, #6]
 152:../Generated_Code/PwmLdd2.c ****   /* Registration of the device structure */
 153:../Generated_Code/PwmLdd2.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd2_ID,DeviceDataPrv);
  61              		.loc 1 153 0
  62 001e 0D4B     		ldr	r3, .L4+8
  63 0020 FA68     		ldr	r2, [r7, #12]
  64 0022 5A61     		str	r2, [r3, #20]
 154:../Generated_Code/PwmLdd2.c ****   DeviceDataPrv->LinkedDeviceDataPtr = TU2_Init((LDD_TUserData *)NULL);
  65              		.loc 1 154 0
  66 0024 0020     		mov	r0, #0
  67 0026 FFF7FEFF 		bl	TU2_Init
  68 002a 021C     		mov	r2, r0
  69 002c FB68     		ldr	r3, [r7, #12]
  70 002e 1A60     		str	r2, [r3]
 155:../Generated_Code/PwmLdd2.c ****   if (DeviceDataPrv->LinkedDeviceDataPtr == NULL) { /* Is initialization of TimerUnit unsuccessful?
  71              		.loc 1 155 0
  72 0030 FB68     		ldr	r3, [r7, #12]
  73 0032 1B68     		ldr	r3, [r3]
  74 0034 002B     		cmp	r3, #0
  75 0036 04D1     		bne	.L2
 156:../Generated_Code/PwmLdd2.c ****     /* Unregistration of the device structure */
 157:../Generated_Code/PwmLdd2.c ****     PE_LDD_UnregisterDeviceStructure(PE_LDD_COMPONENT_PwmLdd2_ID);
  76              		.loc 1 157 0
  77 0038 064B     		ldr	r3, .L4+8
  78 003a 0022     		mov	r2, #0
  79 003c 5A61     		str	r2, [r3, #20]
 158:../Generated_Code/PwmLdd2.c ****     /* Deallocation of the device structure */
 159:../Generated_Code/PwmLdd2.c ****     /* {Default RTOS Adapter} Driver memory deallocation: Dynamic allocation is simulated, no deall
 160:../Generated_Code/PwmLdd2.c ****     return NULL;                       /* If so, then the PWM initialization is also unsuccessful *
  80              		.loc 1 160 0
  81 003e 0023     		mov	r3, #0
  82 0040 00E0     		b	.L3
  83              	.L2:
 161:../Generated_Code/PwmLdd2.c ****   }
 162:../Generated_Code/PwmLdd2.c ****   return ((LDD_TDeviceData *)DeviceDataPrv); /* Return pointer to the device data structure */
  84              		.loc 1 162 0
  85 0042 FB68     		ldr	r3, [r7, #12]
  86              	.L3:
 163:../Generated_Code/PwmLdd2.c **** }
  87              		.loc 1 163 0
  88 0044 181C     		mov	r0, r3
  89 0046 BD46     		mov	sp, r7
  90 0048 04B0     		add	sp, sp, #16
  91              		@ sp needed for prologue
  92 004a 80BD     		pop	{r7, pc}
  93              	.L5:
  94              		.align	2
  95              	.L4:
  96 004c 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
  97 0050 3CF0FFFF 		.word	-4036
  98 0054 00000000 		.word	PE_LDD_DeviceDataList
  99              		.cfi_endproc
 100              	.LFE0:
 102              		.section	.text.PwmLdd2_SetRatio16,"ax",%progbits
 103              		.align	2
 104              		.global	PwmLdd2_SetRatio16
 105              		.code	16
 106              		.thumb_func
 108              	PwmLdd2_SetRatio16:
 109              	.LFB1:
 164:../Generated_Code/PwmLdd2.c **** 
 165:../Generated_Code/PwmLdd2.c **** /*
 166:../Generated_Code/PwmLdd2.c **** ** ===================================================================
 167:../Generated_Code/PwmLdd2.c **** **     Method      :  PwmLdd2_SetRatio16 (component PWM_LDD)
 168:../Generated_Code/PwmLdd2.c **** */
 169:../Generated_Code/PwmLdd2.c **** /*!
 170:../Generated_Code/PwmLdd2.c **** **     @brief
 171:../Generated_Code/PwmLdd2.c **** **         This method sets a new duty-cycle ratio. Ratio is expressed
 172:../Generated_Code/PwmLdd2.c **** **         as a 16-bit unsigned integer number. 0 - FFFF value is
 173:../Generated_Code/PwmLdd2.c **** **         proportional to ratio 0 - 100%. The method is available
 174:../Generated_Code/PwmLdd2.c **** **         only if it is not selected list of predefined values in
 175:../Generated_Code/PwmLdd2.c **** **         [Starting pulse width] property. 
 176:../Generated_Code/PwmLdd2.c **** **         Note: Calculated duty depends on the timer possibilities and
 177:../Generated_Code/PwmLdd2.c **** **         on the selected period.
 178:../Generated_Code/PwmLdd2.c **** **     @param
 179:../Generated_Code/PwmLdd2.c **** **         DeviceDataPtr   - Device data structure
 180:../Generated_Code/PwmLdd2.c **** **                           pointer returned by [Init] method.
 181:../Generated_Code/PwmLdd2.c **** **     @param
 182:../Generated_Code/PwmLdd2.c **** **         Ratio           - Ratio to set. 0 - 65535 value is
 183:../Generated_Code/PwmLdd2.c **** **                           proportional to ratio 0 - 100%
 184:../Generated_Code/PwmLdd2.c **** **     @return
 185:../Generated_Code/PwmLdd2.c **** **                         - Error code, possible codes:
 186:../Generated_Code/PwmLdd2.c **** **                           ERR_OK - OK
 187:../Generated_Code/PwmLdd2.c **** **                           ERR_SPEED - The component does not work in
 188:../Generated_Code/PwmLdd2.c **** **                           the active clock configuration
 189:../Generated_Code/PwmLdd2.c **** */
 190:../Generated_Code/PwmLdd2.c **** /* ===================================================================*/
 191:../Generated_Code/PwmLdd2.c **** LDD_TError PwmLdd2_SetRatio16(LDD_TDeviceData *DeviceDataPtr, uint16_t Ratio)
 192:../Generated_Code/PwmLdd2.c **** {
 110              		.loc 1 192 0
 111              		.cfi_startproc
 112 0000 80B5     		push	{r7, lr}
 113              	.LCFI3:
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 7, -8
 116              		.cfi_offset 14, -4
 117 0002 84B0     		sub	sp, sp, #16
 118              	.LCFI4:
 119              		.cfi_def_cfa_offset 24
 120 0004 00AF     		add	r7, sp, #0
 121              	.LCFI5:
 122              		.cfi_def_cfa_register 7
 123 0006 7860     		str	r0, [r7, #4]
 124 0008 0A1C     		mov	r2, r1
 125 000a BB1C     		add	r3, r7, #2
 126 000c 1A80     		strh	r2, [r3]
 193:../Generated_Code/PwmLdd2.c ****   PwmLdd2_TDeviceData *DeviceDataPrv = (PwmLdd2_TDeviceData *)DeviceDataPtr;
 127              		.loc 1 193 0
 128 000e 7B68     		ldr	r3, [r7, #4]
 129 0010 FB60     		str	r3, [r7, #12]
 194:../Generated_Code/PwmLdd2.c **** 
 195:../Generated_Code/PwmLdd2.c ****   DeviceDataPrv->RatioStore = Ratio;   /* Store new value of the ratio */
 130              		.loc 1 195 0
 131 0012 FB68     		ldr	r3, [r7, #12]
 132 0014 BA1C     		add	r2, r7, #2
 133 0016 1288     		ldrh	r2, [r2]
 134 0018 DA80     		strh	r2, [r3, #6]
 196:../Generated_Code/PwmLdd2.c ****   SetRatio(DeviceDataPtr);
 135              		.loc 1 196 0
 136 001a 7B68     		ldr	r3, [r7, #4]
 137 001c 181C     		mov	r0, r3
 138 001e FFF7FEFF 		bl	SetRatio
 197:../Generated_Code/PwmLdd2.c ****   return ERR_OK;
 139              		.loc 1 197 0
 140 0022 0023     		mov	r3, #0
 198:../Generated_Code/PwmLdd2.c **** }
 141              		.loc 1 198 0
 142 0024 181C     		mov	r0, r3
 143 0026 BD46     		mov	sp, r7
 144 0028 04B0     		add	sp, sp, #16
 145              		@ sp needed for prologue
 146 002a 80BD     		pop	{r7, pc}
 147              		.cfi_endproc
 148              	.LFE1:
 150              		.global	__aeabi_i2f
 151              		.global	__aeabi_fmul
 152              		.global	__aeabi_fcmpgt
 153              		.global	__aeabi_f2uiz
 154              		.section	.text.PwmLdd2_SetDutyUS,"ax",%progbits
 155              		.align	2
 156              		.global	PwmLdd2_SetDutyUS
 157              		.code	16
 158              		.thumb_func
 160              	PwmLdd2_SetDutyUS:
 161              	.LFB2:
 199:../Generated_Code/PwmLdd2.c **** 
 200:../Generated_Code/PwmLdd2.c **** /*
 201:../Generated_Code/PwmLdd2.c **** ** ===================================================================
 202:../Generated_Code/PwmLdd2.c **** **     Method      :  PwmLdd2_SetDutyUS (component PWM_LDD)
 203:../Generated_Code/PwmLdd2.c **** */
 204:../Generated_Code/PwmLdd2.c **** /*!
 205:../Generated_Code/PwmLdd2.c **** **     @brief
 206:../Generated_Code/PwmLdd2.c **** **         This method sets the new duty value of the output signal.
 207:../Generated_Code/PwmLdd2.c **** **         The duty is expressed in microseconds as a 16-bit unsigned
 208:../Generated_Code/PwmLdd2.c **** **         integer number. The method is available only if it is not
 209:../Generated_Code/PwmLdd2.c **** **         selected list of predefined values in [Starting pulse width]
 210:../Generated_Code/PwmLdd2.c **** **         property.
 211:../Generated_Code/PwmLdd2.c **** **     @param
 212:../Generated_Code/PwmLdd2.c **** **         DeviceDataPtr   - Device data structure
 213:../Generated_Code/PwmLdd2.c **** **                           pointer returned by [Init] method.
 214:../Generated_Code/PwmLdd2.c **** **     @param
 215:../Generated_Code/PwmLdd2.c **** **         Time            - Duty to set [in microseconds]
 216:../Generated_Code/PwmLdd2.c **** **     @return
 217:../Generated_Code/PwmLdd2.c **** **                         - Error code, possible codes:
 218:../Generated_Code/PwmLdd2.c **** **                           ERR_OK - OK
 219:../Generated_Code/PwmLdd2.c **** **                           ERR_SPEED - The component does not work in
 220:../Generated_Code/PwmLdd2.c **** **                           the active clock configuration
 221:../Generated_Code/PwmLdd2.c **** **                           ERR_MATH - Overflow during evaluation
 222:../Generated_Code/PwmLdd2.c **** **                           ERR_PARAM_RANGE - Parameter out of range
 223:../Generated_Code/PwmLdd2.c **** */
 224:../Generated_Code/PwmLdd2.c **** /* ===================================================================*/
 225:../Generated_Code/PwmLdd2.c **** LDD_TError PwmLdd2_SetDutyUS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time)
 226:../Generated_Code/PwmLdd2.c **** {
 162              		.loc 1 226 0
 163              		.cfi_startproc
 164 0000 80B5     		push	{r7, lr}
 165              	.LCFI6:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 7, -8
 168              		.cfi_offset 14, -4
 169 0002 84B0     		sub	sp, sp, #16
 170              	.LCFI7:
 171              		.cfi_def_cfa_offset 24
 172 0004 00AF     		add	r7, sp, #0
 173              	.LCFI8:
 174              		.cfi_def_cfa_register 7
 175 0006 7860     		str	r0, [r7, #4]
 176 0008 0A1C     		mov	r2, r1
 177 000a BB1C     		add	r3, r7, #2
 178 000c 1A80     		strh	r2, [r3]
 227:../Generated_Code/PwmLdd2.c ****   PwmLdd2_TDeviceData *DeviceDataPrv = (PwmLdd2_TDeviceData *)DeviceDataPtr;
 179              		.loc 1 227 0
 180 000e 7B68     		ldr	r3, [r7, #4]
 181 0010 FB60     		str	r3, [r7, #12]
 228:../Generated_Code/PwmLdd2.c ****   LDD_TimerUnit_Tfloat rtval;          /* Result of multiplication */
 229:../Generated_Code/PwmLdd2.c **** 
 230:../Generated_Code/PwmLdd2.c ****   /* Time test - this test can be disabled by setting the "Ignore range checking"
 231:../Generated_Code/PwmLdd2.c ****      property to the "yes" value in the "Configuration inspector" */
 232:../Generated_Code/PwmLdd2.c ****   if (Time > 0x5555U) {                /* Is the given value out of range? */
 182              		.loc 1 232 0
 183 0012 BB1C     		add	r3, r7, #2
 184 0014 1A88     		ldrh	r2, [r3]
 185 0016 164B     		ldr	r3, .L16
 186 0018 9A42     		cmp	r2, r3
 187 001a 01D9     		bls	.L9
 233:../Generated_Code/PwmLdd2.c ****     return ERR_PARAM_RANGE;            /* If yes then error */
 188              		.loc 1 233 0
 189 001c 8623     		mov	r3, #134
 190 001e 23E0     		b	.L10
 191              	.L9:
 234:../Generated_Code/PwmLdd2.c ****   }
 235:../Generated_Code/PwmLdd2.c ****   rtval = Time * 3.0F;                 /* Multiply given value and actual clock configuration coeff
 192              		.loc 1 235 0
 193 0020 BB1C     		add	r3, r7, #2
 194 0022 1B88     		ldrh	r3, [r3]
 195 0024 181C     		mov	r0, r3
 196 0026 FFF7FEFF 		bl	__aeabi_i2f
 197 002a 031C     		add	r3, r0, #0
 198 002c 181C     		add	r0, r3, #0
 199 002e 1149     		ldr	r1, .L16+4
 200 0030 FFF7FEFF 		bl	__aeabi_fmul
 201 0034 031C     		add	r3, r0, #0
 202 0036 BB60     		str	r3, [r7, #8]
 236:../Generated_Code/PwmLdd2.c ****   if (rtval > 0xFFFFUL) {              /* Is the result greater than 65535 ? */
 203              		.loc 1 236 0
 204 0038 B868     		ldr	r0, [r7, #8]
 205 003a 0F49     		ldr	r1, .L16+8
 206 003c FFF7FEFF 		bl	__aeabi_fcmpgt
 207 0040 031C     		mov	r3, r0
 208 0042 002B     		cmp	r3, #0
 209 0044 04D0     		beq	.L15
 210              	.L14:
 237:../Generated_Code/PwmLdd2.c ****     DeviceDataPrv->RatioStore = 0xFFFFU; /* If yes then use maximal possible value */
 211              		.loc 1 237 0
 212 0046 FB68     		ldr	r3, [r7, #12]
 213 0048 0122     		mov	r2, #1
 214 004a 5242     		neg	r2, r2
 215 004c DA80     		strh	r2, [r3, #6]
 216 004e 06E0     		b	.L13
 217              	.L15:
 238:../Generated_Code/PwmLdd2.c ****   }
 239:../Generated_Code/PwmLdd2.c ****   else {
 240:../Generated_Code/PwmLdd2.c ****     DeviceDataPrv->RatioStore = (uint16_t)rtval;
 218              		.loc 1 240 0
 219 0050 B868     		ldr	r0, [r7, #8]
 220 0052 FFF7FEFF 		bl	__aeabi_f2uiz
 221 0056 031C     		mov	r3, r0
 222 0058 9AB2     		uxth	r2, r3
 223 005a FB68     		ldr	r3, [r7, #12]
 224 005c DA80     		strh	r2, [r3, #6]
 225              	.L13:
 241:../Generated_Code/PwmLdd2.c ****   }
 242:../Generated_Code/PwmLdd2.c ****   SetRatio(DeviceDataPtr);             /* Calculate and set up new appropriate values of the duty r
 226              		.loc 1 242 0
 227 005e 7B68     		ldr	r3, [r7, #4]
 228 0060 181C     		mov	r0, r3
 229 0062 FFF7FEFF 		bl	SetRatio
 243:../Generated_Code/PwmLdd2.c ****   return ERR_OK;                       /* OK */
 230              		.loc 1 243 0
 231 0066 0023     		mov	r3, #0
 232              	.L10:
 244:../Generated_Code/PwmLdd2.c **** }
 233              		.loc 1 244 0
 234 0068 181C     		mov	r0, r3
 235 006a BD46     		mov	sp, r7
 236 006c 04B0     		add	sp, sp, #16
 237              		@ sp needed for prologue
 238 006e 80BD     		pop	{r7, pc}
 239              	.L17:
 240              		.align	2
 241              	.L16:
 242 0070 55550000 		.word	21845
 243 0074 00004040 		.word	1077936128
 244 0078 00FF7F47 		.word	1199570688
 245              		.cfi_endproc
 246              	.LFE2:
 248              		.section	.text.PwmLdd2_SetDutyMS,"ax",%progbits
 249              		.align	2
 250              		.global	PwmLdd2_SetDutyMS
 251              		.code	16
 252              		.thumb_func
 254              	PwmLdd2_SetDutyMS:
 255              	.LFB3:
 245:../Generated_Code/PwmLdd2.c **** 
 246:../Generated_Code/PwmLdd2.c **** /*
 247:../Generated_Code/PwmLdd2.c **** ** ===================================================================
 248:../Generated_Code/PwmLdd2.c **** **     Method      :  PwmLdd2_SetDutyMS (component PWM_LDD)
 249:../Generated_Code/PwmLdd2.c **** */
 250:../Generated_Code/PwmLdd2.c **** /*!
 251:../Generated_Code/PwmLdd2.c **** **     @brief
 252:../Generated_Code/PwmLdd2.c **** **         This method sets the new duty value of the output signal.
 253:../Generated_Code/PwmLdd2.c **** **         The duty is expressed in milliseconds as a 16-bit unsigned
 254:../Generated_Code/PwmLdd2.c **** **         integer number. The method is available only if it is not
 255:../Generated_Code/PwmLdd2.c **** **         selected list of predefined values in [Starting pulse width]
 256:../Generated_Code/PwmLdd2.c **** **         property.
 257:../Generated_Code/PwmLdd2.c **** **     @param
 258:../Generated_Code/PwmLdd2.c **** **         DeviceDataPtr   - Device data structure
 259:../Generated_Code/PwmLdd2.c **** **                           pointer returned by [Init] method.
 260:../Generated_Code/PwmLdd2.c **** **     @param
 261:../Generated_Code/PwmLdd2.c **** **         Time            - Duty to set [in milliseconds]
 262:../Generated_Code/PwmLdd2.c **** **     @return
 263:../Generated_Code/PwmLdd2.c **** **                         - Error code, possible codes:
 264:../Generated_Code/PwmLdd2.c **** **                           ERR_OK - OK
 265:../Generated_Code/PwmLdd2.c **** **                           ERR_SPEED - The component does not work in
 266:../Generated_Code/PwmLdd2.c **** **                           the active clock configuration
 267:../Generated_Code/PwmLdd2.c **** **                           ERR_MATH - Overflow during evaluation
 268:../Generated_Code/PwmLdd2.c **** **                           ERR_PARAM_RANGE - Parameter out of range
 269:../Generated_Code/PwmLdd2.c **** */
 270:../Generated_Code/PwmLdd2.c **** /* ===================================================================*/
 271:../Generated_Code/PwmLdd2.c **** LDD_TError PwmLdd2_SetDutyMS(LDD_TDeviceData *DeviceDataPtr, uint16_t Time)
 272:../Generated_Code/PwmLdd2.c **** {
 256              		.loc 1 272 0
 257              		.cfi_startproc
 258 0000 80B5     		push	{r7, lr}
 259              	.LCFI9:
 260              		.cfi_def_cfa_offset 8
 261              		.cfi_offset 7, -8
 262              		.cfi_offset 14, -4
 263 0002 84B0     		sub	sp, sp, #16
 264              	.LCFI10:
 265              		.cfi_def_cfa_offset 24
 266 0004 00AF     		add	r7, sp, #0
 267              	.LCFI11:
 268              		.cfi_def_cfa_register 7
 269 0006 7860     		str	r0, [r7, #4]
 270 0008 0A1C     		mov	r2, r1
 271 000a BB1C     		add	r3, r7, #2
 272 000c 1A80     		strh	r2, [r3]
 273:../Generated_Code/PwmLdd2.c ****   PwmLdd2_TDeviceData *DeviceDataPrv = (PwmLdd2_TDeviceData *)DeviceDataPtr;
 273              		.loc 1 273 0
 274 000e 7B68     		ldr	r3, [r7, #4]
 275 0010 FB60     		str	r3, [r7, #12]
 274:../Generated_Code/PwmLdd2.c ****   LDD_TimerUnit_Tfloat rtval;          /* Result of multiplication */
 275:../Generated_Code/PwmLdd2.c **** 
 276:../Generated_Code/PwmLdd2.c ****   /* Time test - this test can be disabled by setting the "Ignore range checking"
 277:../Generated_Code/PwmLdd2.c ****      property to the "yes" value in the "Configuration inspector" */
 278:../Generated_Code/PwmLdd2.c ****   if (Time > 0x16U) {                  /* Is the given value out of range? */
 276              		.loc 1 278 0
 277 0012 BB1C     		add	r3, r7, #2
 278 0014 1B88     		ldrh	r3, [r3]
 279 0016 162B     		cmp	r3, #22
 280 0018 01D9     		bls	.L19
 279:../Generated_Code/PwmLdd2.c ****     return ERR_PARAM_RANGE;            /* If yes then error */
 281              		.loc 1 279 0
 282 001a 8623     		mov	r3, #134
 283 001c 23E0     		b	.L20
 284              	.L19:
 280:../Generated_Code/PwmLdd2.c ****   }
 281:../Generated_Code/PwmLdd2.c ****   rtval = Time * 3000.000000045776F;   /* Multiply given value and actual clock configuration coeff
 285              		.loc 1 281 0
 286 001e BB1C     		add	r3, r7, #2
 287 0020 1B88     		ldrh	r3, [r3]
 288 0022 181C     		mov	r0, r3
 289 0024 FFF7FEFF 		bl	__aeabi_i2f
 290 0028 031C     		add	r3, r0, #0
 291 002a 181C     		add	r0, r3, #0
 292 002c 1049     		ldr	r1, .L26
 293 002e FFF7FEFF 		bl	__aeabi_fmul
 294 0032 031C     		add	r3, r0, #0
 295 0034 BB60     		str	r3, [r7, #8]
 282:../Generated_Code/PwmLdd2.c ****   if (rtval > 0xFFFFUL) {              /* Is the result greater than 65535 ? */
 296              		.loc 1 282 0
 297 0036 B868     		ldr	r0, [r7, #8]
 298 0038 0E49     		ldr	r1, .L26+4
 299 003a FFF7FEFF 		bl	__aeabi_fcmpgt
 300 003e 031C     		mov	r3, r0
 301 0040 002B     		cmp	r3, #0
 302 0042 04D0     		beq	.L25
 303              	.L24:
 283:../Generated_Code/PwmLdd2.c ****     DeviceDataPrv->RatioStore = 0xFFFFU; /* If yes then use maximal possible value */
 304              		.loc 1 283 0
 305 0044 FB68     		ldr	r3, [r7, #12]
 306 0046 0122     		mov	r2, #1
 307 0048 5242     		neg	r2, r2
 308 004a DA80     		strh	r2, [r3, #6]
 309 004c 06E0     		b	.L23
 310              	.L25:
 284:../Generated_Code/PwmLdd2.c ****   }
 285:../Generated_Code/PwmLdd2.c ****   else {
 286:../Generated_Code/PwmLdd2.c ****     DeviceDataPrv->RatioStore = (uint16_t)rtval;
 311              		.loc 1 286 0
 312 004e B868     		ldr	r0, [r7, #8]
 313 0050 FFF7FEFF 		bl	__aeabi_f2uiz
 314 0054 031C     		mov	r3, r0
 315 0056 9AB2     		uxth	r2, r3
 316 0058 FB68     		ldr	r3, [r7, #12]
 317 005a DA80     		strh	r2, [r3, #6]
 318              	.L23:
 287:../Generated_Code/PwmLdd2.c ****   }
 288:../Generated_Code/PwmLdd2.c ****   SetRatio(DeviceDataPtr);             /* Calculate and set up new appropriate values of the duty r
 319              		.loc 1 288 0
 320 005c 7B68     		ldr	r3, [r7, #4]
 321 005e 181C     		mov	r0, r3
 322 0060 FFF7FEFF 		bl	SetRatio
 289:../Generated_Code/PwmLdd2.c ****   return ERR_OK;                       /* OK */
 323              		.loc 1 289 0
 324 0064 0023     		mov	r3, #0
 325              	.L20:
 290:../Generated_Code/PwmLdd2.c **** }
 326              		.loc 1 290 0
 327 0066 181C     		mov	r0, r3
 328 0068 BD46     		mov	sp, r7
 329 006a 04B0     		add	sp, sp, #16
 330              		@ sp needed for prologue
 331 006c 80BD     		pop	{r7, pc}
 332              	.L27:
 333 006e C046     		.align	2
 334              	.L26:
 335 0070 00803B45 		.word	1161527296
 336 0074 00FF7F47 		.word	1199570688
 337              		.cfi_endproc
 338              	.LFE3:
 340              		.section	.text.SetRatio,"ax",%progbits
 341              		.align	2
 342              		.code	16
 343              		.thumb_func
 345              	SetRatio:
 346              	.LFB4:
 291:../Generated_Code/PwmLdd2.c **** 
 292:../Generated_Code/PwmLdd2.c **** /*
 293:../Generated_Code/PwmLdd2.c **** ** ===================================================================
 294:../Generated_Code/PwmLdd2.c **** **     Method      :  SetRatio (component PWM_LDD)
 295:../Generated_Code/PwmLdd2.c **** **
 296:../Generated_Code/PwmLdd2.c **** **     Description :
 297:../Generated_Code/PwmLdd2.c **** **         This method calculates new value of duty compare register from 
 298:../Generated_Code/PwmLdd2.c **** **         variable RatioStore.
 299:../Generated_Code/PwmLdd2.c **** **         This method is internal. It is used by Processor Expert only.
 300:../Generated_Code/PwmLdd2.c **** ** ===================================================================
 301:../Generated_Code/PwmLdd2.c **** */
 302:../Generated_Code/PwmLdd2.c **** static void SetRatio(LDD_TDeviceData *DeviceDataPtr)
 303:../Generated_Code/PwmLdd2.c **** {
 347              		.loc 1 303 0
 348              		.cfi_startproc
 349 0000 80B5     		push	{r7, lr}
 350              	.LCFI12:
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 7, -8
 353              		.cfi_offset 14, -4
 354 0002 86B0     		sub	sp, sp, #24
 355              	.LCFI13:
 356              		.cfi_def_cfa_offset 32
 357 0004 00AF     		add	r7, sp, #0
 358              	.LCFI14:
 359              		.cfi_def_cfa_register 7
 360 0006 7860     		str	r0, [r7, #4]
 304:../Generated_Code/PwmLdd2.c ****   PwmLdd2_TDeviceData *DeviceDataPrv = (PwmLdd2_TDeviceData*)DeviceDataPtr;
 361              		.loc 1 304 0
 362 0008 7B68     		ldr	r3, [r7, #4]
 363 000a 3B61     		str	r3, [r7, #16]
 305:../Generated_Code/PwmLdd2.c ****   uint16_t Period;
 306:../Generated_Code/PwmLdd2.c ****   uint16_t Duty;
 307:../Generated_Code/PwmLdd2.c **** 
 308:../Generated_Code/PwmLdd2.c ****   (void)TU2_GetPeriodTicks(DeviceDataPrv->LinkedDeviceDataPtr, &Period);
 364              		.loc 1 308 0
 365 000c 3B69     		ldr	r3, [r7, #16]
 366 000e 1A68     		ldr	r2, [r3]
 367 0010 3B1C     		mov	r3, r7
 368 0012 0E33     		add	r3, r3, #14
 369 0014 101C     		mov	r0, r2
 370 0016 191C     		mov	r1, r3
 371 0018 FFF7FEFF 		bl	TU2_GetPeriodTicks
 309:../Generated_Code/PwmLdd2.c ****   if (Period == 0U) {
 372              		.loc 1 309 0
 373 001c 3B1C     		mov	r3, r7
 374 001e 0E33     		add	r3, r3, #14
 375 0020 1B88     		ldrh	r3, [r3]
 376 0022 002B     		cmp	r3, #0
 377 0024 05D1     		bne	.L29
 310:../Generated_Code/PwmLdd2.c ****     Duty = DeviceDataPrv->RatioStore;
 378              		.loc 1 310 0
 379 0026 3B1C     		mov	r3, r7
 380 0028 1633     		add	r3, r3, #22
 381 002a 3A69     		ldr	r2, [r7, #16]
 382 002c D288     		ldrh	r2, [r2, #6]
 383 002e 1A80     		strh	r2, [r3]
 384 0030 0CE0     		b	.L30
 385              	.L29:
 311:../Generated_Code/PwmLdd2.c ****   }
 312:../Generated_Code/PwmLdd2.c ****   else {
 313:../Generated_Code/PwmLdd2.c ****     Duty = (uint16_t)((((uint32_t)(Period) * DeviceDataPrv->RatioStore) + 0x8000) >> 0x10);
 386              		.loc 1 313 0
 387 0032 3B1C     		mov	r3, r7
 388 0034 0E33     		add	r3, r3, #14
 389 0036 1B88     		ldrh	r3, [r3]
 390 0038 3A69     		ldr	r2, [r7, #16]
 391 003a D288     		ldrh	r2, [r2, #6]
 392 003c 5343     		mul	r3, r2
 393 003e 8022     		mov	r2, #128
 394 0040 1202     		lsl	r2, r2, #8
 395 0042 9B18     		add	r3, r3, r2
 396 0044 1A0C     		lsr	r2, r3, #16
 397 0046 3B1C     		mov	r3, r7
 398 0048 1633     		add	r3, r3, #22
 399 004a 1A80     		strh	r2, [r3]
 400              	.L30:
 314:../Generated_Code/PwmLdd2.c ****   }
 315:../Generated_Code/PwmLdd2.c ****   (void)TU2_SetOffsetTicks(DeviceDataPrv->LinkedDeviceDataPtr, CHANNEL, Duty);
 401              		.loc 1 315 0
 402 004c 3B69     		ldr	r3, [r7, #16]
 403 004e 1A68     		ldr	r2, [r3]
 404 0050 3B1C     		mov	r3, r7
 405 0052 1633     		add	r3, r3, #22
 406 0054 1B88     		ldrh	r3, [r3]
 407 0056 101C     		mov	r0, r2
 408 0058 0121     		mov	r1, #1
 409 005a 1A1C     		mov	r2, r3
 410 005c FFF7FEFF 		bl	TU2_SetOffsetTicks
 316:../Generated_Code/PwmLdd2.c **** }
 411              		.loc 1 316 0
 412 0060 BD46     		mov	sp, r7
 413 0062 06B0     		add	sp, sp, #24
 414              		@ sp needed for prologue
 415 0064 80BD     		pop	{r7, pc}
 416              		.cfi_endproc
 417              	.LFE4:
 419 0066 C046     		.text
 420              	.Letext0:
 421              		.file 2 "C:/Freescale/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 422              		.file 3 "../Generated_Code/PE_Types.h"
DEFINED SYMBOLS
                            *ABS*:00000000 PwmLdd2.c
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:24     .text.PwmLdd2_Init:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:29     .text.PwmLdd2_Init:00000000 PwmLdd2_Init
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:96     .text.PwmLdd2_Init:0000004c $d
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:103    .text.PwmLdd2_SetRatio16:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:108    .text.PwmLdd2_SetRatio16:00000000 PwmLdd2_SetRatio16
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:345    .text.SetRatio:00000000 SetRatio
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:155    .text.PwmLdd2_SetDutyUS:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:160    .text.PwmLdd2_SetDutyUS:00000000 PwmLdd2_SetDutyUS
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:242    .text.PwmLdd2_SetDutyUS:00000070 $d
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:249    .text.PwmLdd2_SetDutyMS:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:254    .text.PwmLdd2_SetDutyMS:00000000 PwmLdd2_SetDutyMS
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:335    .text.PwmLdd2_SetDutyMS:00000070 $d
C:\Users\Student\AppData\Local\Temp\ccxgc7PA.s:341    .text.SetRatio:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
TU2_Init
PE_LDD_DeviceDataList
__aeabi_i2f
__aeabi_fmul
__aeabi_fcmpgt
__aeabi_f2uiz
TU2_GetPeriodTicks
TU2_SetOffsetTicks
